.386P 

INCLUDE DEFS.INC
INCLUDE A20.INC
INCLUDE IRQ0.INC
INCLUDE IRQ1.INC
INCLUDE IRQ8.INC
INCLUDE FAT12.INC
INCLUDE GDT.INC
INCLUDE IDT.INC
INCLUDE FONTS.INC
INCLUDE VIDEO.INC
INCLUDE KERNEL32.INC

DATASEG16 SEGMENT USE16 

	KERNEL32   		DB	"KERNEL32EXE"           			
	LENKERNEL32		DB	?						; TOTAL SECTORS OF KERNEL

	PRG_BASE16 		DD ?    						
	PRG_BASE32 		DD ?    						

DATASEG16 ENDS

DATASEG32 SEGMENT USE32

	SCANTABLE 		DB '0123456789ABCDEF'
	VIDEO_POS		DD 320h
	
	CHAR			DB 	30h
	POS				DD	280h
	
	TOTALSECTORS	DB ?
	IMAGESIG		DB 'PE'
	ENTRYPOINT32	DD ?

DATASEG32 ENDS

CODESEG16 SEGMENT USE16  						; START THE 16BIT CODE SEGMENT
	ASSUME CS:SEGS16,DS:SEGS16

	START16 PROC

		CLD

		MOV		AX, CS
		MOV		DS, AX 
		MOV		ES, AX

		CALL	SET_VIDEO_MODE
		
		CALL	LOAD_KERNEL32
		
		CALL	COPY_SECTORS

		CALL	ENABLE_IRQ8						; ENABLE RTC (REAL TIME CLOCK) - IRQ8

		CALL 	ENABLE_A20						; ENABLE THE A20 SO WE CAN ACCESS RAM ABOVE 1MB.

		XOR 	EAX, EAX						; SETUP SOME OTHER VARIABLES
		MOV 	AX, CS
		SHL 	EAX, 4    						; LINEAR ADDR
		MOV 	PRG_BASE16,EAX

		XOR 	EAX, EAX
		MOV 	AX, SEGS32
		SHL 	EAX, 4
		MOV 	PRG_BASE32, EAX  				; WE WILL NEED THIS LATER

		CALL	INSTALL_GDT

		MOV 	EAX, PRG_BASE16					; SETUP GDT AND IDT BASE
		ADD 	EAX, GDT_START
		MOV 	GDT_ADDR, EAX
		
		MOV 	EAX, PRG_BASE16
		ADD 	EAX, IDT_START
		MOV 	IDT_ADDR, EAX
												; WE ARE NOW READY TO MOVE TO 16BIT PMODE 
		CLI   									; NO MORE IRQS ALLOWED PAST THIS POINT

		LIDT 	[IDTR]
		LGDT 	[GDTR]

		MOV 	EAX, CR0						; GOTO PMODE!
		OR 		AL, 1           				; SET PM BIT
		MOV 	CR0, EAX       					; WE ARE NOW IN 16BIT PMODE
		
		PUSHFD
		PUSH 	DWORD PTR SELCODEDESC32
		PUSH 	DWORD PTR OFFSET START32
		IRETD   								; GOTO 32BIT SEGMENT
	
	START16 ENDP
	
	COPY_SECTORS PROC
	
		PUSH	ES
		MOV		AX, CS
		MOV		DS, AX
		XOR		ESI, ESI
		MOV		SI, OFFSET LENKERNEL32
		XOR		AX, AX
		MOV		ES, AX
		MOV		EDI, SEGS32
		SHL		EDI, 4
		ADD		EDI, OFFSET TOTALSECTORS
		MOVSB

		POP		ES
		RET

	COPY_SECTORS ENDP

CODESEG16 ENDS

CODESEG32 SEGMENT USE32
	ASSUME CS:SEGS32,DS:SEGS32
	
	START32 PROC

		CALL 	COPY_KERNEL32_TO_1MB

		MOV 	AX, SELDATADESC32				; RELOAD ALL SEGMENT REGS WITH 32BIT SELECTORS
		MOV 	DS, AX
		MOV 	FS, AX
		MOV 	GS, AX
		MOV 	AX, SELVIDEODESC32
		MOV 	ES, AX

		STI  									; ENABLE IRQS

		PUSHFD
		PUSH 	DWORD PTR SELKERNELCODE32
		PUSH 	DWORD PTR ENTRYPOINT32
		IRETD
		
	START32 ENDP
	
CODESEG32 ENDS

END START16     								; START PROGRAM IN CODEDESC16:START
