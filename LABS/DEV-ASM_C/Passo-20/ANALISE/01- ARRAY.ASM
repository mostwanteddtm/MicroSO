#masm#

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2014 Hex-Rays, <support@hex-rays.com>	            |
; |			 License info: 48-3057-7374-2C			                        |
; |	Zhou Tao, Jiangsu Australia Sinuo Network Technology Co., Ltd.	        |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	026D5023A31B694A482C61AB0BBBB7ED
; Input	CRC32 :	740AA3ED

; File Name   :	C:\MicroSO\trunk\LABS\DEV-ASM_C\Passo-20\MAIN.COM
; Format      :	MS-DOS COM-file
; Base Address:	1000h Range: 10100h-10200h Loaded length: 100h

		.286p
		.model tiny

; ===========================================================================

                                                                    ; Segment type:	Pure code
seg000		segment	word public 'CODE'
		assume cs:seg000
		org 100h
		assume es:nothing, ss:nothing, ds:seg000

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public start
start		proc    near
    		push	cs
    		pop	    ax
    		mov	    ds, ax
    		mov	    es, ax
    		assume  es:seg000
    		call	_main
    		int	    20h		                                        ; DOS -	PROGRAM	TERMINATION
    		
start		endp			                                        ; returns to DOS--identical to INT 21/AH=00h


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_fmemcpy	proc    near		                                    ; CODE XREF: _main+18p

var_s0		= word ptr  0
arg_6		= word ptr  0Ch
arg_A		= word ptr  10h

    		push	bp
    		push	bx
    		mov	    bp, sp 
    		mov     bx, 1
    		mov     [bp+6], bx                                      ; 0700h:FFE4h - Endereco da quantidade de parametros
    		mov	    bx, [bp+arg_6] 
    		mov     [bp-18h], bx                                    ; 0700h:FFC6h - Endereco que aponta para o endereco da string 
    		pop	    bx
    		pop	    bp
    		retn
    		
_fmemcpy	endp

; ---------------------------------------------------------------------------
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

                                                                    ; int __cdecl main(int argc, const char	**argv,	const char **envp)
_main		proc    near		                                    ; CODE XREF: start+6p

var_6		= byte ptr -6
argc		= dword	ptr  4
argv		= word ptr  8
envp		= word ptr  0Ch

    		enter	6, 0
    		push	si
    		push	di
    		push	3
    		mov	    ax, offset array
    		mov	    dx, ds
    		push	dx
    		push	ax
    		lea	    ax, [bp+var_6]
    		mov	    dx, ss
    		push	dx
    		push	ax
    		nop
    		push	cs
    		call	_fmemcpy
    		add	    sp, 0Ah
    		lea	    ax, [bp+var_6]
    		push	ax
    		call	printf
    		add	    sp, 2
    		pop	    di
    		pop	    si
    		leave
    		retn
		
_main		endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


_printf		proc    near		                                    ; CODE XREF: printf+74p printf+93p
		    mov	    ah, 0Eh
		    int	    10h		                                        ; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
                                                					; AL = character, BH = display page (alpha modes)
                                                					; BL = foreground color	(graphics modes)
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

printf		proc near		                                        ; CODE XREF: _main+22p

var_28		= word ptr -28h
var_26		= word ptr -26h
var_24		= word ptr -24h
var_22		= byte ptr -22h
var_4		= word ptr -4
arg_0		= word ptr  4
arg_2		= byte ptr  6

    		enter	28h, 0
    		push	si
    		push	di
    		lea	    ax, [bp+arg_2]
    		mov	    [bp+var_26], ax
    		mov	    ax, [bp+arg_0]
    		mov	    [bp+var_24], ax
    		jmp	    loc_10176
; ---------------------------------------------------------------------------

loc_10169:				                                            ; CODE XREF: printf+3Ej
    		add	    [bp+var_26], 2
    		mov	    bx, [bp+var_26]
    		mov	    ax, [bx-2]
    		mov	    [bp+var_24], ax

loc_10176:				                                            ; CODE XREF: printf+12j
    		cmp	    [bp+var_24], 0
    		jnz	    short loc_1017F
    		jmp	    loc_10195
; ---------------------------------------------------------------------------

loc_1017F:				                                            ; CODE XREF: printf+26j
    		mov	    ax, [bp+var_4]
    		shl	    ax, 1
    		lea	    bx, [bp+var_22]
    		add	    bx, ax
    		mov	    ax, [bp+var_24]
    		mov	    [bx], ax
    		add	    [bp+var_4], 1
    		jmp	    loc_10169
; ---------------------------------------------------------------------------

loc_10195:				                                            ; CODE XREF: printf+28j
    		mov	    [bp+var_28], 0
    		jmp	    loc_101A1
; ---------------------------------------------------------------------------

loc_1019D:				                                            ; CODE XREF: printf:loc_101F0j
		    add	    [bp+var_28], 1

loc_101A1:				                                            ; CODE XREF: printf+46j
    		mov	    cx, 2
    		mov	    ax, [bp+var_4]
    		cwd
    		idiv	cx
    		cmp	    [bp+var_28], ax
    		jl	    short loc_101B2
    		jmp	    loc_101F3
; ---------------------------------------------------------------------------

loc_101B2:				                                            ; CODE XREF: printf+59j
    		mov	    ax, [bp+var_28]
    		shl	    ax, 1
    		lea	    bx, [bp+var_22]
    		add	    bx, ax
    		mov	    ax, [bx]
    		mov	    [bp+var_24], ax
    		mov	    bx, [bp+var_24]
    		mov	    al, [bx]
    		cbw
    		push	ax
    		call	_printf
    		add	    sp, 2

loc_101CE:				                                            ; CODE XREF: printf+99j
    		mov	    bx, [bp+var_24]
    		add	    [bp+var_24], 1
    		mov	    al, [bx]
    		cbw
    		cmp	    ax, 0
    		jnz	    short loc_101E0
    		jmp	    loc_101F0
; ---------------------------------------------------------------------------

loc_101E0:				                                            ; CODE XREF: printf+87j
    		mov	    bx, [bp+var_24]
    		mov	    al, [bx]
    		cbw
    		push	ax
    		call	_printf
    		add	    sp, 2
    		jmp	    loc_101CE
; ---------------------------------------------------------------------------

loc_101F0:				                                            ; CODE XREF: printf+89j
		    jmp	    loc_1019D
; ---------------------------------------------------------------------------

loc_101F3:				                                            ; CODE XREF: printf+5Bj
    		mov	    [bp+var_26], 0
    		pop	    di
    		pop	    si
    		leave
    		retn 
    		
printf		endp

; ---------------------------------------------------------------------------
array		db 'Marcos Roberto da Costa !!',0	                    ; DATA XREF: _main+8o
seg000		ends


		end start
