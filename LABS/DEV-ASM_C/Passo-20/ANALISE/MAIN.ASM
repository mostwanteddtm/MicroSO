#masm#

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2014 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3057-7374-2C			    |
; |	Zhou Tao, Jiangsu Australia Sinuo Network Technology Co., Ltd.	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	237664A245BB4E514A60BD1BCDEF44D6
; Input	CRC32 :	63FD52AC

; File Name   :	C:\MicroSO\trunk\LABS\DEV-ASM_C\Passo-20\MAIN.COM
; Format      :	MS-DOS COM-file
; Base Address:	1000h Range: 10100h-10236h Loaded length: 136h

		.286p
		.model tiny

; ===========================================================================

; Segment type:	Pure code
seg000		segment	PARA public 'CODE'
		assume cs:seg000
		org 100h
		assume es:nothing, ss:nothing, ds:seg000

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public start
start		proc near
		push	cs
		pop	ax
		mov	ds, ax
		mov	es, ax
		assume es:seg000
		call	_main
		int	20h		; DOS -	PROGRAM	TERMINATION
start		endp			; returns to DOS--identical to INT 21/AH=00h

; ---------------------------------------------------------------------------
		push	bp
		push	bx
		mov	bp, sp
		mov	bx, 1
		mov	[bp+6],	bx
		mov	bx, [bp+0Ch]
		mov	[bp-18h], bx
		pop	bx
		pop	bp
		retn
; ---------------------------------------------------------------------------
		retn
; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
_main		proc near		; CODE XREF: start+6p

var_6		= word ptr -6
var_4		= word ptr -4
argc		= dword	ptr  4
argv		= word ptr  8
envp		= word ptr  0Ch

		enter	6, 0
		push	si
		push	di
		mov	[bp+var_6], offset aMarcosRobertoD ; "Marcos Roberto da	Costa !!"
		mov	[bp+var_4], offset buffer
		push	[bp+var_6]
		push	[bp+var_4]
		call	strcpy
		add	sp, 4
		push	[bp+var_4]
		call	printf
		add	sp, 2
		pop	di
		pop	si
		leave
		retn
_main		endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


_printf		proc near		; CODE XREF: printf+74p printf+93p
		mov	ah, 0Eh
		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
					; AL = character, BH = display page (alpha modes)
					; BL = foreground color	(graphics modes)
		retn
_printf		endp


; =============== S U B	R O U T	I N E =======================================


_strcpy		proc near		; CODE XREF: strcpy+Cp    
    
        push    si
        push    ax
        mov     si, [bp-8]
        mov     cx, 0
cont:   lodsb
        inc     cx
        cmp     al, 0
        je      ccount
        jmp     cont
        
ccount: pop     ax
        pop     si        

		mov	si, [bp-8]
		mov	di, [bp-0Ah]
		rep movsb
		
		retn
_strcpy		endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

printf		proc near		; CODE XREF: _main+1Fp

var_28		= word ptr -28h
var_26		= word ptr -26h
var_24		= word ptr -24h
var_22		= byte ptr -22h
var_4		= word ptr -4
arg_0		= word ptr  4
arg_2		= byte ptr  6

		enter	28h, 0
		push	si
		push	di
		lea	ax, [bp+arg_2]
		mov	[bp+var_26], ax
		mov	ax, [bp+arg_0]
		mov	[bp+var_24], ax
		jmp	loc_1017E
; ---------------------------------------------------------------------------

loc_10171:				; CODE XREF: printf+3Ej
		add	[bp+var_26], 2
		mov	bx, [bp+var_26]
		mov	ax, [bx-2]
		mov	[bp+var_24], ax

loc_1017E:				; CODE XREF: printf+12j
		cmp	[bp+var_24], 0
		jnz	short loc_10187
		jmp	loc_1019D
; ---------------------------------------------------------------------------

loc_10187:				; CODE XREF: printf+26j
		mov	ax, [bp+var_4]
		shl	ax, 1
		lea	bx, [bp+var_22]
		add	bx, ax
		mov	ax, [bp+var_24]
		mov	[bx], ax
		add	[bp+var_4], 1
		jmp	loc_10171
; ---------------------------------------------------------------------------

loc_1019D:				; CODE XREF: printf+28j
		mov	[bp+var_28], 0
		jmp	loc_101A9
; ---------------------------------------------------------------------------

loc_101A5:				; CODE XREF: printf:loc_101F8j
		add	[bp+var_28], 1

loc_101A9:				; CODE XREF: printf+46j
		mov	cx, 2
		mov	ax, [bp+var_4]
		cwd
		idiv	cx
		cmp	[bp+var_28], ax
		;jl	short loc_101BA   
		jz	short loc_101BA
		jmp	loc_101FB
; ---------------------------------------------------------------------------

loc_101BA:				; CODE XREF: printf+59j
		mov	ax, [bp+var_28]
		shl	ax, 1
		lea	bx, [bp+var_22]
		add	bx, ax
		mov	ax, [bx]
		mov	[bp+var_24], ax
		mov	bx, [bp+var_24]
		mov	al, [bx]
		cbw
		push	ax
		call	_printf
		add	sp, 2

loc_101D6:				; CODE XREF: printf+99j
		mov	bx, [bp+var_24]
		add	[bp+var_24], 1
		mov	al, [bx]
		cbw
		cmp	ax, 0
		jnz	short loc_101E8
		jmp	loc_101F8
; ---------------------------------------------------------------------------

loc_101E8:				; CODE XREF: printf+87j
		mov	bx, [bp+var_24]
		mov	al, [bx]
		cbw
		push	ax
		call	_printf
		add	sp, 2
		jmp	loc_101D6
; ---------------------------------------------------------------------------

loc_101F8:				; CODE XREF: printf+89j
		jmp	loc_101A5
; ---------------------------------------------------------------------------

loc_101FB:				; CODE XREF: printf+5Bj
		mov	[bp+var_26], 0
		pop	di
		pop	si
		leave
		retn
printf		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

strcpy		proc near		; CODE XREF: _main+16p

arg_0		= word ptr  4
arg_2		= word ptr  6

		enter	2, 0
		push	si
		push	di
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	_strcpy
		add	sp, 4
		pop	di
		pop	si
		leave
		retn
strcpy		endp

; ---------------------------------------------------------------------------
aMarcosRobertoD	db 'Marcos Roberto da Costa !!',0 ; DATA XREF: _main+6o
buffer		db 0			; DATA XREF: _main+Bo
seg000		ends


		end start
