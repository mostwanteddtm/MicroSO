#masm#

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2014 Hex-Rays, <support@hex-rays.com>	            |
; |			 License info: 48-3057-7374-2C			                        |
; |	Zhou Tao, Jiangsu Australia Sinuo Network Technology Co., Ltd.	        |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	02113A4723C60414BF4B0E4F36E002A8
; Input	CRC32 :	36856301

; File Name   :	C:\MicroSO\trunk\LABS\DEV-ASM_C\Passo-20\MAIN.COM
; Format      :	MS-DOS COM-file
; Base Address:	1000h Range: 10100h-10200h Loaded length: 100h

		.286p
		.model tiny

; ===========================================================================

                                                                    ; Segment type:	Pure code
seg000		segment	word public 'CODE'
		assume cs:seg000
		org 100h
		assume es:nothing, ss:nothing, ds:seg000

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public      start 
		
start		proc    near
    
    		push	cs
    		pop	    ax
    		mov	    ds, ax
    		mov	    es, ax
    		assume  es:seg000
    		call	_main
    		int	    20h		                                        ; DOS -	PROGRAM	TERMINATION  
    		
start		endp			                                        ; returns to DOS--identical to INT 21/AH=00h

; ---------------------------------------------------------------------------
    		push	bp
    		push	ax
    		mov	    bp, sp
    		mov	    si, [bp+0Ch]
    		mov	    cx, [bp+10h]
    		mov	    ax, ds
    		mov	    es, ax
    		mov	    di, [bp+0]
    		rep     movsb
    		pop	    ax
    		pop	    bp
    		retn
; ---------------------------------------------------------------------------
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

                                                                    ; int __cdecl main(int argc, const char	**argv,	const char **envp)
_main		proc    near		                                    ; CODE XREF: start+6p

argc		= dword	ptr  4
argv		= word ptr  8
envp		= word ptr  0Ch

    		enter	2, 0
    		push	si
    		push	di
    		push	offset aMarcosRobertoD                          ; "Marcos Roberto da Costa !!"
    		call	printf
    		add	    sp, 2
    		pop	    di
    		pop	    si
    		leave
    		retn 
    		
_main		endp

; ---------------------------------------------------------------------------
;		align 2

; =============== S U B	R O U T	I N E =======================================


_printf		proc    near		                                    ; CODE XREF: printf+74p printf+93p  
    
    		mov	    ah, 0Eh
    		int	    10h		                                        ; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
                                                					; AL = character, BH = display page (alpha modes)
                                                					; BL = foreground color	(graphics modes)
		    retn  
		    
_printf		endp

; ---------------------------------------------------------------------------
;		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

printf		proc    near		                                    ; CODE XREF: _main+9p

var_28		= word ptr -28h
var_26		= word ptr -26h
var_24		= word ptr -24h
var_22		= byte ptr -22h
var_4		= word ptr -4
arg_0		= word ptr  4
arg_2		= byte ptr  6

    		enter	28h, 0
    		push	si
    		push	di
    		lea	    ax, [bp+arg_2]
    		mov	    [bp+var_26], ax
    		mov	    ax, [bp+arg_0]
    		mov	    [bp+var_24], ax
    		jmp	    loc_1015E
; ---------------------------------------------------------------------------

loc_10151:															; CODE XREF: printf+3Ej
			add		[bp+var_26], 2
			mov		bx, [bp+var_26]
			mov		ax, [bx-2]
			mov		[bp+var_24], ax
	
loc_1015E:															; CODE XREF: printf+12j
			cmp		[bp+var_24], 0
			jnz		short loc_10167
			jmp		loc_1017D
; ---------------------------------------------------------------------------
	
loc_10167:															; CODE XREF: printf+26j
			mov		ax, [bp+var_4]
			shl		ax, 1
			lea		bx, [bp+var_22]
			add		bx, ax
			mov		ax, [bp+var_24]
			mov		[bx], ax
			add		[bp+var_4], 1
			jmp		loc_10151
; ---------------------------------------------------------------------------
	
loc_1017D:															; CODE XREF: printf+28j
			mov		[bp+var_28], 0
			jmp		loc_10189
; ---------------------------------------------------------------------------
	
loc_10185:															; CODE XREF: printf:loc_101D8j
			add		[bp+var_28], 1
	
loc_10189:															; CODE XREF: printf+46j
			mov		cx, 2
			mov		ax, [bp+var_4]
			cwd	
			idiv	cx
			cmp		[bp+var_28], ax
			;jl		short loc_1019A                                 ; Por algum motivo a compilacao com o C++ 1.52 funciona assim
			jz 	short loc_1019A									    ; Quando descompila com o IDA, so funciona assim
			jmp		loc_101DB
; ---------------------------------------------------------------------------
	
loc_1019A:															; CODE XREF: printf+59j
			mov		ax, [bp+var_28]
			shl		ax, 1
			lea		bx, [bp+var_22]
			add		bx, ax
			mov		ax, [bx]
			mov		[bp+var_24], ax
			mov		bx, [bp+var_24]
			mov		al, [bx]
			cbw	
			push	ax
			call	_printf
			add		sp, 2
	
loc_101B6:															; CODE XREF: printf+99j
			mov		bx, [bp+var_24]
			add		[bp+var_24], 1
			mov		al, [bx]
			cbw	
			cmp		ax, 0
			jnz		short loc_101C8
			jmp		loc_101D8
; ----------	-----------------------------------------------------------------
	
loc_101C8:															; CODE XREF: printf+87j
			mov		bx, [bp+var_24]
			mov		al, [bx]
			cbw	
			push	ax
			call	_printf
			add		sp, 2
			jmp		loc_101B6
; ----------	-----------------------------------------------------------------
	
loc_101D8:															; CODE XREF: printf+89j
			jmp		loc_10185
; ----------	-----------------------------------------------------------------
	
loc_101DB:															; CODE XREF: printf+5Bj
			mov		[bp+var_26], 0
			pop		di
			pop		si
			leave
			retn
			
printf		endp

; ---------------------------------------------------------------------------
aMarcosRobertoD	db 'Marcos Roberto da Costa !!',0 					; DATA XREF: _main+6o
		db 0
seg000		ends


		end start
