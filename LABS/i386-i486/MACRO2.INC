; DEFINE MACRO TO GET GDT, IDT LINEAR ADDRESS AND LIMIT THEN
; SAVE IT

BUILD_DTR MACRO GDT, IDT, PGDT, PIDT, SIZEGDT, SIZEIDT
													; DEFINE MACRO
	MOV		AX, SIZEGDT								; GET GDT SEGMENT LIMIT
	MOV		WORD PTR [PGDT], AX						; PUT IN PGDT_LIMIT
	XOR		EAX, EAX								; CLEAR EAX
	MOV		AX, GDT									; GET
	SHL		EAX, 4									; CONVERT TO 32-BIT LINEAR ADDRESS
	MOV		DWORD PTR [PGDT+2], EAX					; PUT IN PGDT_ADDR
	
; BUILD IDTR

	MOV		AX, SIZEIDT								; GET IDT SEGMENT ADDRES
	MOV		WORD PTR [PIDT], AX						; PUT IDT PIDT_LIMIT
	XOR		EAX, EAX								; CLEAR EAX
	MOV		AX, IDT									; GET SEGMENT ADDRESS
	SHL		EAX, 4									; CONVERT TO 32-BIT LINEAR ADDRESS
	MOV 	DWORD PTR [PIDT+2], EAX					; PUT IN PIDT_ADDR
	
ENDM
	
; DEFINE MACRO TO INITIALIZE THE SEGMENT BASE ADDRESS FOR
; EACH SEGMENT DESCRIPTOR

BUILD_DT MACRO DTSEG, DTTABLE, DTCOUNT
													; DEFINE MACRO
	LOCAL	BDT1									; LOCAL LABEL
	MOV		AX, DTSEG								; GET SEGMENT ADDRESS
	MOV		ES, AX									; PUT IN ES
	MOV		SI, OFFSET DTTABLE						; GET ADDRESS OF GDT_PHSYS_TAB
	MOV		CX, DTCOUNT								; GET GDT_PHSYS_TA SIZE

BDT1:
	LODSW											; GET DESCRIPTOR NUMBER
	MOV		BX, AX									; PUT IN BX
	AND		BX, 0FFF8H								; MASK OF TI BIT AND RPL
	LODSW											; GET CORRESPONDING SEGMENT 
													; ADDRESS
													; FOR THE ABOVE DESCRIPTOR
	PUSH	AX										; SAVE IT
	SHL		AX, 4									; GET LOWER 4 BYTES OFFSET
	MOV		ES:[BX][D_BASE1], AX					; SAVE IT DESCRIPTOR
	POP		AX										; RESTORE SEGMENT ADDRES
	SHR		AX, 12									; GET DE HIGHEST BYTE
	MOV		ES:[BX][D_BASE2], AL					; SAVE IT IN DESCRIPTOR
	LOOP	BDT1									; CONTINUE
	
ENDM

; DEFINE MACRO TO SWITCH TO PROTECTED MODE AND INITIALIZE
; DATA SEGMENT REGISTER

GOTO_PROT MACRO GDTPTR, IDTPTR, CSEG, STKSEG, STKPTR, DSEG

	LOCAL 	ENTER_PROT, NOW_IN_PROT					; LOCAL LABEL
	LGDT	[GDTPTR]								; LOAD GTD ADDRESS AND LIMIT
													; INTO GDTR
	LIDT	[IDTPTR]								; LOAD IDT ADDRESS AND LIMIT
													; INTO IDTR
													
	MOV		EAX, CR0								; GET CR0 REGISTER
	OR 		AL, PROT_ENABLE							; ENABLE PROTECTED MODE
	MOV		CR0, EAX								; RESTORE CR0
	JMP		DWORD PTR CS:[ENTER_PROT]				; FAR JUMP TO
													; FLUSH INSTRUCTION QUEUE
													
ENTER_PROT:
	DW		OFFSET NOW_IN_PROT						; EIP
	DW		CSEG									; CODE SEGMENT SELECTOR
	
NOW_IN_PROT:
	XOR		AX, AX									; CLEAR AX
	LLDT	AX										; LOAD NULL SELECTOR TO LDTR
	
	MOV		AX, STKSEG								; GET STACK SEGMENT SELECTOR
	MOV		SS, AX									; PUT IN SS
	MOV		SP, STKPTR								; SET STACK POINTER
	
	MOV		AX, DSEG								; GET DATA SEGMENT SELECTOR
	MOV		DS, AX									; PUT IN DS
	MOV		ES, AX									; PUT IN ES
	MOV		FS, AX									; PUT IN FS
	MOV		GS, AX									; PUT IN GS
	
ENDM
