
<!-- saved from url=(0071)http://www.siliconkit.com/rebecca/help/segmentoffset/Segmentoffset.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>The Segment:Offset Addressing Scheme</title>
<meta http-equiv="keywords" content="Assembly, Segment, Offset, Addressing, Absolute">
<meta http-equiv="description" content="How to use SEGMENT:OFFSET addresses.">
<meta name="COPYRIGHT" content="© 2001,2002 Daniel B. Sedory">
<meta name="robots" content="ALL">
<meta name="revisit-after" content="30 days">
<meta name="distribution" content="Global">
<meta name="robots" content="INDEX">
<meta name="revisit-after" content="30">
</head><body bgcolor="#FFFFFF"><br><br>
<p align="CENTER"><font size="7"><b>Removing the Mystery from<br>SEGMENT : 
OFFSET<br>Addressing</b></font><br><br><font size="4">Copyright©2001, 
2002 by Daniel B. Sedory</font></p>
<br><br>
<p><font face="Times" size="4">For information on using MS-DEBUG, see <a href="http://www.siliconkit.com/rebecca/help/segmentoffset/debug.htm">A Guide to DEBUG</a>.</font></p>
<br><br>
<p><font face="Arial" size="4">
There are often many different Segment:Offset pairs which can be used 
to address the same location in your computer's memory. This scheme is a 
<b><i>relative way</i></b> of viewing computer memory as opposed to a 
<b><i>Linear</i></b> or <b><i>Absolute</i></b> addressing scheme. When an 
Absolute addressing scheme is used, each memory location has its own 
<i>unique</i> designation; a much easier way for people to view things. So, 
why did anyone ever create such an awkward way as the Segment:Offset pairs 
for dealing with computer memory? Well, here's a brief history lesson:
<br><br>
Segment:Offset addressing was introduced at a time when the largest 
register in a CPU was only 16-bits (or two bytes) which meant that it could 
address only 65,536 bytes (64kb) of memory directly. But everyone was hungry 
for a way to run programs that were much larger than 64kb! Rather than 
creating a CPU with larger register sizes (of at least 24-bits just to add 
another byte), the CPU designers at Intel decided to stick with only 16-bit 
registers for their 8086 CPU and change the way it would use them: They 
expanded the instruction set so it could <i>group</i> &nbsp;two 16-bit 
registers together whenever the program needed to tell the CPU to use an 
Absolute memory location that was too far off for a single two-byte 
register to contain the reference.
<br><br>
Unfortunately, they didn't simply combine two registers into a high and low 
order (which would have given us a way to access up to 4 Gigabytes of 
memory!) Instead, they came up with the Segment:Offset scheme which allowed 
a CPU to effectively address only about 1 Megabyte of memory. Keep in mind, 
however, that this was at a time when even Bill Gates couldn't dream of 
anyone wanting a PC with more than 640kb of memory.
<br><br>
The scheme works like this: The value in any register considered to be a 
Segment register is multiplied by 16 (or shifted one hexadecimal byte to the 
left; add an extra 0 to the end of the hex number) and then the value in an 
Offset register is added to it. So, the Absolute address for any combination 
of Segment and Offset pairs is found by using this formula:<br><br>
<table width="100%" cellspacing="2" cellpadding="7" border="2"><tbody><tr>
<td bgcolor="#DDFFDD"><center><table border="0"><tbody><tr><td>
<p align="right"><font face="Courier New" size="4"><b>Absolute &nbsp; 
<br>Memory &nbsp; <br>Location &nbsp; </b></font></p></td><td>
<p align="center"><font face="Courier New" size="4"><b> = (Segment value * 
16) + Offset value</b></font></p></td></tr></tbody></table></center></td></tr></tbody></table>
<br>
This will become a lot easier once you've seen a few examples. The Absolute 
or Linear address for the Segment:Offset pair, <font face="Verdana"><b>F000:FFFD</b>
</font> can be computed quite easily in your mind by simply inserting a zero 
at the end of the Segment value ( which is the same as multiplying by 16 ) 
and then adding the Offset value:</font></p><ul><pre><font face="Courier 
New" size="5"><b>            F000<font color="blue">0</font>
           + FFFD
           ------
            FFFFD  or  1,048,573</b></font>(decimal)

<font face="Courier New" size="5"><b>Here's another example: 923F:E2FF -&gt;

            923F<font color="blue">0</font>
           + E2FF
           ------
            A06EF   or   657,135</b></font>(decimal)</pre></ul><font face="Arial" size="4">Now let's compute the Absolute Memory location for<span style="background-color: #FFFF00"> the
 largest value that can be expressed using a Segment:Offset reference: </span></font><ul>
<pre><font face="Courier New" size="5"><b>            FFFF<font color="blue">0</font>
          +  FFFF   
          -------
          <span style="background-color: #FFFFCC"> 10FFEF </span> or <span style="background-color: #FFFFCC"> 1,114,095 </span></b></font>(decimal)
</pre></ul><font face="Arial" size="4">In reality, it wasn't until 
quite some time after the 8086, that such a large value actually corresponded 
to a real Memory location. Once it became common for PCs to have over 1MB of 
memory, programmers developed ways to use it to their advantage and this last 
byte became part of what's now called the HMA (High Memory Area). But until 
that time, if a program tried to use a Segment:Offset pair that exceeded a 
20-bit Absolute address (1MB), the CPU would <i>truncate</i> the higher 
bits, effectively <i>mapping</i> any value over <font face="Verdana">
<b>FFFFF</b></font>h (1,048,575) to an address within the first Segment. 
Thus, 10FFEFh was mapped to FFEFh.<br><br>
One of the <i>downsides</i> in using Segment:Offset 
pairs (and I suspect what confuses most) is the fact that there can be a 
large number of <i>pairs</i> that refer to the same exact memory location. 
For example, every pair below refers to <b><i>exactly the same location</i>
</b> in memory:</font><p></p><table><tbody><tr><td bgcolor="#C0DFFF">
<p align="center"></p><pre><b>
  0007:7B90   0008:7B80   0009:7B70   000A:7B60   000B:7B50   000C:7B40   

  0047:7790   0048:7780   0049:7770   004A:7760   004B:7750   004C:7740   

  0077:7490   0078:7480   0079:7470   007A:7460   007B:7450   007C:7440   

  01FF:5C10   0200:5C00   0201:5BF0   0202:5BE0   0203:5BD0   0204:5BC0   

  07BB:0050   07BC:0040   07BD:0030   07BE:0020   07BF:0010   07C0:0000   
</b></pre><p></p></td></tr></tbody></table>

<p><font face="Arial" size="4">The Segment:Offset s listed above are only 
some of the ways that one could refer to the single Absolute Memory location 
of: <font face="Verdana" size="5"><b>7C00</b></font>h.
<br><br>As a matter of fact there <i>may be</i> up to<span style="background-color: #FFFF00">
<font face="Verdana"><b>4,096</b></font> </span> different Segment:Offset 
s for addressing a single byte in Memory; depending upon its particular 
location!<span style="background-color: #FFFFCC"> From Absolute address <font face="Verdana"><b>0</b></font>h 
through <font face="Verdana"><b>FFEF</b></font>h ( 0 through 65,519 )</span>, 
the number of different s can be computed as follows:<span style="background-color: #FFFFCC"> Divide the Absolute 
address by 16 ( shift all the hex digits one to the right ), throw away any 
fractional remainder and add 1. This is the same thing as saying: Add 1 to 
the Segment number if the Offset is 000Fh (15) or less. </span> For example, 
the byte in memory referenced by the Segment:Offset  <font face="Verdana">
<b>0040:0000</b></font> has a total of 41h (or 65) different s that might 
be used. For the Absolute address <font face="Verdana"><b>7C00</b>h</font>, 
which was mentioned above, there's a total of: <font face="Verdana">7C00 / 
10h --&gt; 7C0 + 1 = 7C1 (or 1,985)</font> <i>relative</i> ways to address 
this same memory location using Segment:Offset 
s.<span style="background-color: #FFFFCC"> For the Absolute addresses 
from <font face="Verdana"><b>FFF0</b></font>h (65,520) all the way through 
<font face="Verdana"><b>FFFFF</b></font>h (1,048,575), there will always be 
<b><font face="Verdana">4,096</font> Segment:Offset s</b> one could use 
to refer to these addresses!</span> That's a little over <b>88%</b> of the 
memory that can be accessed using Segment:Offsets. The last 65,520 bytes 
that can be accessed by this method are collectively called the High Memory 
Area (HMA).<span style="background-color: #FFFFCC"> For each 16 bytes higher 
in the <b>HMA</b> that we point to, there is one less Segment:Offset  
available to reference that paragraph.&nbsp;</span> Due to the sheer number 
of possible Segment:Offset s for each address, most programmers have 
decided to use the same <i>normalization method</i> when writing about a 
particular location in Memory. ( See the note below on <a href="http://www.siliconkit.com/rebecca/help/segmentoffset/Segmentoffset.html#NORM">
Normalized Notation</a> ).
<br><br>
The boundaries between various areas of Memory are graphically displayed in 
the illustrations below.</font>
<br><br>

</p><hr>

<br><br><center><font size="7"><b>Visualizing the Overlapping Segments</b>
</font></center><br><br>
<p><font face="Arial" size="5"><b>The following 
illustrations should help students <i>visualize the artificial layout</i> 
of the Segment boundaries in a system's Memory.</b></font>
</p><p><br></p>
<font face="Arial" size="4">SEGMENTS are more like a mental construct or a 
way of visualizing a computer's Memory, rather than being closely tied to 
the physical hardware itself. In <b>Figure 0</b>, we've tried to show how 
each <i>Segment</i> of 65,536 bytes <i><b>overlaps</b> most of</i> &nbsp;the 
preceding Segment. As you can see, each Segment begins only 16 bytes (or a 
paragraph) after the preceding one. In computer terminology, <span style="background-color: #FFFFCC">a <b><i>paragraph</i></b> is used to refer 
to 16 consecutive bytes of Memory</span>. For every 16 bytes higher in 
Memory that we point to, the number of overlapping Segments will increase 
by one <b>until</b> we arrive at the end of the first Segment. At that point, 
each successive paragraph of Memory (up to 1MB) has a constant number of 
4,096 overlapping Segments! Figure 0 also shows the Segment:Offset values 
for each of the four <i>corners</i> of the first five of Segments.</font>
<p></p>
<center><img src="./The Segment Offset Addressing Scheme pt_BR_files/Figure0.gif" width="466" height="380"></center>

<p><font face="Arial" size="4">In Figure 1 (see below), the focus is on just 
the beginning of Segments 1, 2, 3 and so on, rather than the whole Segment. 
Notice how the first 16 bytes of memory appear in the Figure. There's only 
one segment there: <i>no other segments overlap</i> these bytes. Therefore, 
the Segment:Offset pairs for each of the first 16 bytes in memory is actually 
unique! There's only one way to refer to them: with the Segment value of 
<font face="Verdana">0000:</font> and one of the 16 Offsets, 0000 through 
000F hex. The next 16 bytes in memory (10h through 1Fh) will each have 
precisely <b>two</b> different Segment:Offset pairs that can be used to 
address them. For each of the first five Segments, the exact number of 
equivalent Segment:Offset pairs for the last byte in the paragraph has been 
shown in the aqua (light-blue) colored boxes.
<br><br>
(For comments on the part of Figure 1 under the BLUE line, see text below.)
</font></p>

<center><img src="./The Segment Offset Addressing Scheme pt_BR_files/Figure1.gif" width="466" height="380"></center>

<p><font face="Arial" size="4">The second part of Figure 1 above, shows what 
happens at the transition from a paragraph of memory that is still within the 
<i>boundary</i> of the first 64kb Segment (Absolute addresses FFF0h 
through FFFFh) to those paragraphs which are beyond its boundary (10000h and 
following). Note that the first paragraph of Segment 0FFF: (which is the same 
as the last 16 bytes within Segment 0000:) is the first paragraph in Memory 
to have a total of 4,096 different Segment:Offset pairs that could be used 
to reference its bytes. </font></p><br>

<p><font face="Arial" size="4">Figure 2 shows that <b>Segment <font face="Verdana">9000</font>:</b> is the last whole 64kb segment to lie within 
the bounds of what's called " <b>Conventional Memory</b> " ( the 
first 640kb or 655,360 bytes). The first paragraph of <b>Segment <font face="Verdana">A000</font>:</b> is the beginning of the Upper Memory Area 
(<b>UMA</b>). The UMA contains a total of 384kb or 393,216 bytes. <b>Segment 
<font face="Verdana">F000</font>:</b> is the last whole segment that lies 
within the bounds of the UMA.</font></p>

<center><img src="./The Segment Offset Addressing Scheme pt_BR_files/Figure2.gif" width="466" height="366"></center>

<p align="center"><font face="Arial" size="5"> 640 kb + 384 kb = 1024 kb (or 
1,048,576 bytes) = 1 Megabyte.<br>
</font><font face="Comic Sans MS">(A long time ago, the UMA was called the 
'Reserved Area.')</font></p>

<p><font face="Arial" size="4">Another way of looking at the first 1MB of 
Memory (and hopefully something that will help those who might still be a 
bit confused ) is the fact that each of these 1,048,576 bytes can be 
accessed by using one of just the following <b>16 Segment</b> references (<b>
none of which overlap</b> any of the others): 
<font face="Verdana"><b>0000:</b></font>, 
<font face="Verdana"><b>1000:</b></font>, 
<font face="Verdana"><b>2000:</b></font>, ... 
<font face="Verdana"><b>9000:</b></font> and 
<font face="Verdana"><b>A000:</b></font> through 
<font face="Verdana"><b>F000:</b></font> plus one of their 65,536 Offsets. 
Although it would really be nice if we could always refer to a particular 
byte in Memory using just these 16 Segments, that would be rather wasteful of 
memory resources: When it comes time for an OS like Windows to assign a full 
64kb of free memory to an App such as DEBUG, it's not simply a matter of 
convenience for it to use the very first 16-byte Segment reference of 
continuous memory that it can find. Moving up to the next even 
<font face="Verdana">1000</font>h Segment would leave even more unused 
<b><i>holes</i></b> in Memory than there are already! (There is, however, an 
agreed upon convention called <a href="http://www.siliconkit.com/rebecca/help/segmentoffset/Segmentoffset.html#NORM">Normalized Addressing</a> 
which has been very helpful.)</font></p>
<p><font face="Arial" size="4">Figure 3 shows the end of the <b>UMA</b> and 
the beginning of the last Segment (<b>Segment 
<font face="Verdana">FFFF</font>:</b>) in the Segment:Offset scheme. When 
the 8086 was first created, there wasn't even 640kb of memory in most PCs. 
And as you might recall from our history lesson above, addresses in this 
part of the Segment:Offset scheme were first <i>mapped</i> to bytes in 
Segment <font face="Verdana">0000</font>. Later, the memory above 1MB that 
could still be accessed using Segment:Offset pairs became known as The High 
Memory Area (<b>HMA</b>).</font></p>

<center><img src="./The Segment Offset Addressing Scheme pt_BR_files/Figure3.gif" width="466" height="316"></center>

<p><font face="Arial" size="4">The High Memory Area (<b>HMA</b>) contains 
<b>only</b> <i>one paragraph short</i> of 64kb (or just 65,520 bytes). 
<b>Segment <font face="Verdana">FFFF</font>:</b> is the only segment that 
can <i>reach</i> the last 16 bytes of the HMA. Here's a text file of a 
boring <a href="http://www.siliconkit.com/rebecca/help/segmentoffset/HMAtable.htm">Table of HMA Segment:Offset pairs</a> which 
shows how the number of pairs decreases to only one for the last 16 bytes 
of the HMA.</font></p><font face="Arial" size="4">

<center><img src="./The Segment Offset Addressing Scheme pt_BR_files/Figure4.gif" width="466" height="208"></center>
<a name="NORM"><br></a><hr>

<br><br><center><font size="6"><b><i>Normalized</i> Segment:Offset Notation
</b></font></center><br><br>

<p><font face="Arial" size="4">Since there are so many different ways that a 
single byte in Memory might be referenced using Segment:Offset pairs, most 
programmers have agreed to use the same convention to <i>normalize</i> all 
such pairs into values that will always be <b><i>unique</i></b>. These 
unique pairs are called a <b>Normalized Address</b> or <b>Pointer</b>.
<br><br>
By confining the Offset to just the Hex values <font face="Verdana"><b>
0</b></font>h through <font face="Verdana"><b>F</b></font>h (16 hex digits); 
or a single <b>paragraph</b> and setting the Segment value accordingly, we 
have a unique way to reference all Segment:Offset Memory pair locations. To 
convert an arbitrary Segment:Offset pair into a normalized address or pointer 
is a two-step process that's quite easy for an assembly programmer:</font></p><ol><font face="Arial" size="4">
<li> Convert the pairs into a single physical (linear) address.</li>
<li> Then simply insert the colon (:) between the last two hex digits!<br>
</li></font></ol><font face="Arial" size="4">
For example, in order to <i>normalize</i> <font face="Verdana"><b>1000:1B0F</b></font>, 
the intermediate step is: <font size="5">&nbsp; <b>1000:1B0F</b> <img src="./The Segment Offset Addressing Scheme pt_BR_files/rtar.gif" height="15" width="33"> 
<font color="blue"><b>11B0F</b></font>h <img src="./The Segment Offset Addressing Scheme pt_BR_files/rtar.gif" height="15" width="33"> 
<font color="green"><b>11B0:F</b></font></font> (or 11B0:000F)<br><br>Since 
the normalized form will always have three leading zero bytes in its Offset, 
programmers often write it with just the digit that counts as shown here: 
<font face="Verdana" color="green"><b>11B0:F</b></font> (when you see an 
address like this, it's almost a sure sign that the author is using 
normalized notation).</font><p></p>
<br><br>
<font face="Verdana" size="5"><i>Last Revised:</i> <b>22 JUL 2002</b>.</font>
<hr>
<p align="center"><b><font face="Arial">You can write to me using this: 
<a href="http://www.siliconkit.com/rebecca/Feedback.html" target="SISTER">online reply form</a>. </font>
(It opens in a new window.)</b>
<br><br> <font size="5">
<img src="./The Segment Offset Addressing Scheme pt_BR_files/left.gif" width="33" height="14"> <a href="http://www.siliconkit.com/rebecca/tool/FreeTools.html">The Starman's ASSEMBLY Index Page</a> 
<br><br><img src="./The Segment Offset Addressing Scheme pt_BR_files/left.gif" width="33" height="14"> <a href="http://www.siliconkit.com/rebecca/index.html"><b>The Starman's Realm Index Page</b></a></font></p><font size="5">
<p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>

</font></font></body></html>