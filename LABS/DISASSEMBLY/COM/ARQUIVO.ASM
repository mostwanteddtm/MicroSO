

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2014 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3057-7374-2C			    |
; |	Zhou Tao, Jiangsu Australia Sinuo Network Technology Co., Ltd.	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	024E6A92D2872CAA3F2C920D24D4F34D
; Input	CRC32 :	33E6C7AF

; File Name   :	C:\MicroSO\trunk\LABS\DISASSEMBLY\COM\TESTE.COM
; Format      :	MS-DOS COM-file
; Base Address:	100h Range: 1100h-2981h	Loaded length: 1881h
; OS type	  :  MS	DOS
; Application type:  Executable	16bit

		.286p
		.model tiny

; ===========================================================================

; Segment type:	Pure code
seg000		segment	public 'CODE'
		assume cs:seg000
		org 100h
		assume es:nothing, ss:nothing, ds:seg000

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

		public start
start		proc near
		mov	ah, 30h
		int	21h		; DOS -	GET DOS	VERSION
					; Return: AL = major version number (00h for DOS 1.x)
		cmp	al, 2
		jnb	short loc_1109
		retn
; ---------------------------------------------------------------------------

loc_1109:				; ...
		mov	di, ds
		mov	si, ds:2
		mov	cs:__dataseg, di
		sub	si, di
		cmp	si, 1000h
		jb	short loc_111F
		mov	si, 1000h

loc_111F:				; ...
		mov	bx, 1982h
		add	bx, 7FEh
		jnb	short loc_1136
		call	__FF_MSGBANNER
		xor	ax, ax
		push	ax
		call	__NMSG_WRITE
		mov	ax, 4CFFh
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
					; AL = exit code
; ---------------------------------------------------------------------------

loc_1136:				; ...
		mov	sp, bx
		mov	ss:1628h, ax
		xchg	ah, al
		mov	ss:1626h, ax
		mov	ax, si
		mov	cl, 4
		shl	ax, cl
		dec	ax
		mov	ss:15E6h, ax
		mov	bx, 15E8h
		mov	word ptr ss:[bx], ss
		and	sp, 0FFFEh
		mov	ss:[bx+4], sp
		mov	ax, 0FFFEh
		push	ax
		mov	ss:[bx+0Ah], sp
		not	ax
		push	ax
		mov	ss:[bx+6], sp
		mov	ss:[bx+8], sp
		mov	ss:15E2h, sp
		add	si, di
		mov	ds:2, si
		mov	bx, es
		sub	bx, si
		neg	bx
		mov	ah, 4Ah
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		mov	word ptr ss:1624h, ds
		cld
		mov	di, 1982h
		mov	cx, 1982h
		sub	cx, di
		xor	ax, ax
		rep stosb
		mov	cx, word_2878
		jcxz	short loc_119C
		call	cx

loc_119C:				; ...
		call	__setenvp
		call	__setargv
		xor	bp, bp
		call	__cinit
		push	envp		; envp
		push	argv		; argv
		push	argc		; argc
		call	_main
		push	ax		; int
		call	_exit
; ---------------------------------------------------------------------------

locret_11BA:				; ...
		retn
start		endp

; ---------------------------------------------------------------------------

__cintDIV:
		mov	ax, cs:__dataseg
		mov	ds, ax
		mov	ax, 3
		mov	off_25E4, 2DEh
; START	OF FUNCTION CHUNK FOR __fptrap

__amsg_exit:				; ...
		push	ax
		mov	bx, cs:__dataseg
		mov	ds, bx
		nop
		push	cs
		call	locret_1662
		call	__FF_MSGBANNER
		call	__NMSG_WRITE
		cmp	word_287A, 0D6D6h
		jnz	short loc_11EB
		pop	ax
		push	ax
		call	off_287E

loc_11EB:				; ...
		mov	ax, 0FFh
		push	ax		; int
		call	off_25E4
; END OF FUNCTION CHUNK	FOR __fptrap
; ---------------------------------------------------------------------------
__dataseg	dw 0			; ...
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__cinit		proc near		; ...
		mov	word ptr dword_264A+2, ds
		mov	ax, 3500h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_2610, bx
		mov	word ptr dword_2610+2, es
		push	cs
		pop	ds
		mov	ax, 2500h
		mov	dx, 1BBh
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		push	ss
		pop	ds
		cmp	word ptr dword_2888, 0
		jz	short loc_125D
		mov	word ptr dword_2888+2, cs
		mov	word_2892, cs
		mov	word_2590, cs
		mov	ax, 18A0h
		sub	ax, 0
		mov	cl, 4
		shr	ax, cl
		add	word_2590, ax
		mov	es, word_2624
		assume es:nothing
		mov	si, es:2Ch
		mov	ax, word_288C
		mov	dx, word_288E
		xor	bx, bx
		call	dword_2888
		jnb	short loc_124F
		jmp	__fptrap
; ---------------------------------------------------------------------------

loc_124F:				; ...
		mov	ax, word_2890
		mov	dx, word_2892
		mov	bx, 3
		call	dword_2888

loc_125D:				; ...
		mov	es, word_2624
		mov	cx, es:2Ch
		jcxz	short loc_12A6
		mov	es, cx
		assume es:nothing
		xor	di, di

loc_126C:				; ...
		cmp	byte ptr es:[di], 0
		jz	short loc_12A6
		mov	cx, 0Dh
		mov	si, 1602h
		repe cmpsb
		jz	short loc_1287
		mov	cx, 7FFFh
		xor	ax, ax
		repne scasb
		jnz	short loc_12A6
		jmp	short loc_126C
; ---------------------------------------------------------------------------

loc_1287:				; ...
		push	es
		push	ds
		pop	es
		assume es:seg000
		pop	ds
		mov	si, di
		mov	di, 1630h
		mov	cl, 4

loc_1292:				; ...
		lodsb
		sub	al, 41h
		jb	short loc_12A4
		shl	al, cl
		xchg	ax, dx
		lodsb
		sub	al, 41h
		jb	short loc_12A4
		or	al, dl
		stosb
		jmp	short loc_1292
; ---------------------------------------------------------------------------

loc_12A4:				; ...
		push	ss
		pop	ds

loc_12A6:				; ...
		mov	bx, 4

loc_12A9:				; ...
		and	byte ptr [bx+1630h], 0BFh
		mov	ax, 4400h
		int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
					; BX = file or device handle
		jb	short loc_12BF
		test	dl, 80h
		jz	short loc_12BF
		or	byte ptr [bx+1630h], 40h

loc_12BF:				; ...
		dec	bx
		jns	short loc_12A9
		mov	si, 1894h
		mov	di, 1894h
		call	loc_137C
		mov	si, 1894h
		mov	di, 1894h
		call	loc_136D
		mov	si, 1896h
		mov	di, 1896h
		call	loc_137C
		retn
__cinit		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

; void __cdecl exit(int)
_exit		proc near		; ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		xor	cx, cx
		jmp	short loc_12FF
; ---------------------------------------------------------------------------

; void __cdecl _exit(int)
__exit:					; ...
		push	bp
		mov	bp, sp
		mov	cx, 1
		jmp	short loc_12FF
; ---------------------------------------------------------------------------

; void _cexit(void)
__cexit:
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	cx, 100h
		jmp	short loc_12FF
; ---------------------------------------------------------------------------

; void _c_exit(void)
__c_exit:
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	cx, 101h

loc_12FF:				; ...
		mov	byte_2657, ch
		push	cx
		or	cl, cl
		jnz	short loc_132F
		mov	si, 1982h
		mov	di, 1982h
		call	loc_136D
		mov	si, 1982h
		mov	di, 1982h
		call	loc_137C
		mov	si, 1894h
		mov	di, 1896h
		call	loc_136D
		cmp	word_287A, 0D6D6h
		jnz	short loc_132F
		call	off_2880

loc_132F:				; ...
		mov	si, 1896h
		mov	di, 1896h
		call	loc_136D
		mov	si, 1896h
		mov	di, 1896h
		call	loc_137C
		call	__ctermsub
		pop	ax
		or	ah, ah
		jnz	short loc_1350
		mov	ax, [bp+arg_0]
		mov	ah, 4Ch
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
					; AL = exit code
; ---------------------------------------------------------------------------

loc_1350:				; ...
		pop	di
		pop	si
		pop	bp
		retn
_exit		endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__ctermsub	proc near		; ...
		mov	cx, word ptr dword_2888+2
		jcxz	short loc_1361
		mov	bx, 2
		call	dword_2888

loc_1361:				; ...
		push	ds
		lds	dx, dword_2610
		mov	ax, 2500h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		retn
__ctermsub	endp

; ---------------------------------------------------------------------------

loc_136D:				; ...
		cmp	si, di
		jnb	short locret_137B
		dec	di
		dec	di
		mov	cx, [di]
		jcxz	short loc_136D
		call	cx
		jmp	short loc_136D
; ---------------------------------------------------------------------------

locret_137B:				; ...
		retn
; ---------------------------------------------------------------------------

loc_137C:				; ...
		cmp	si, di
		jnb	short locret_138E
		sub	di, 4
		mov	ax, [di]
		or	ax, [di+2]
		jz	short loc_137C
		call	dword ptr [di]
		jmp	short loc_137C
; ---------------------------------------------------------------------------

locret_138E:				; ...
		retn
; ---------------------------------------------------------------------------
		align 2

; int __cdecl main(int argc, const char	**argv,	const char **envp)
_main:					; ...
		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, offset aProgramaCompil ; "Programa compilado com o Microsoft Visu"...
		push	ax
		call	_printf
		add	sp, 2
		call	_getch
		mov	ax, 0
		jmp	$+3
; ---------------------------------------------------------------------------

loc_13AC:				; ...
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__FF_MSGBANNER	proc near		; ...
		push	bp
		mov	bp, sp
		mov	ax, 0FCh
		push	ax
		call	__NMSG_WRITE
		cmp	word_2690, 0
		jz	short loc_13C7
		call	word_2690

loc_13C7:				; ...
		mov	ax, 0FFh
		push	ax
		call	__NMSG_WRITE
		mov	sp, bp
		pop	bp
		retn
__FF_MSGBANNER	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__fptrap	proc near		; ...

; FUNCTION CHUNK AT 01CA SIZE 00000029 BYTES

		mov	ax, 2
		jmp	__amsg_exit
__fptrap	endp ; sp-analysis failed

; ---------------------------------------------------------------------------

__nullcheck:
		push	si
		xor	si, si
		mov	cx, 42h
		xor	ah, ah
		cld

loc_13E1:				; ...
		lodsb
		xor	ah, al
		loop	loc_13E1
		xor	ah, 55h
		jz	short loc_13F8
		call	__FF_MSGBANNER
		mov	ax, 1
		push	ax
		call	__NMSG_WRITE
		mov	ax, 1

loc_13F8:				; ...
		pop	si
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__setargv	proc near		; ...
		pop	word_2692
		mov	ax, word_2628
		mov	dx, 1
		cmp	al, 2
		jz	short loc_1431
		mov	es, word_2624
		assume es:nothing
		mov	es, word ptr es:2Ch
		assume es:nothing
		mov	word ptr dword_264A+2, es
		xor	ax, ax
		cwd
		mov	cx, 8000h
		xor	di, di

loc_141D:				; ...
		repne scasb
		scasb
		jnz	short loc_141D
		inc	di
		inc	di
		mov	word ptr dword_264A, di
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		mov	dx, cx

loc_1431:				; ...
		mov	di, 1
		mov	si, 81h
		mov	ds, word_2624
		assume ds:nothing

loc_143B:				; ...
		lodsb
		cmp	al, 20h
		jz	short loc_143B
		cmp	al, 9
		jz	short loc_143B
		cmp	al, 0Dh
		jz	short loc_14B7
		or	al, al
		jz	short loc_14B7
		inc	di

loc_144D:				; ...
		dec	si

loc_144E:				; ...
		lodsb
		cmp	al, 20h
		jz	short loc_143B
		cmp	al, 9
		jz	short loc_143B
		cmp	al, 0Dh
		jz	short loc_14B7
		or	al, al
		jz	short loc_14B7
		cmp	al, 22h
		jz	short loc_1487
		cmp	al, 5Ch
		jz	short loc_146A
		inc	dx
		jmp	short loc_144E
; ---------------------------------------------------------------------------

loc_146A:				; ...
		xor	cx, cx

loc_146C:				; ...
		inc	cx
		lodsb
		cmp	al, 5Ch
		jz	short loc_146C
		cmp	al, 22h
		jz	short loc_147A
		add	dx, cx
		jmp	short loc_144D
; ---------------------------------------------------------------------------

loc_147A:				; ...
		mov	ax, cx
		shr	cx, 1
		adc	dx, cx
		test	al, 1
		jnz	short loc_144E
		jmp	short loc_1487
; ---------------------------------------------------------------------------

loc_1486:				; ...
		dec	si

loc_1487:				; ...
		lodsb
		cmp	al, 0Dh
		jz	short loc_14B7
		or	al, al
		jz	short loc_14B7
		cmp	al, 22h
		jz	short loc_144E
		cmp	al, 5Ch
		jz	short loc_149B
		inc	dx
		jmp	short loc_1487
; ---------------------------------------------------------------------------

loc_149B:				; ...
		xor	cx, cx

loc_149D:				; ...
		inc	cx
		lodsb
		cmp	al, 5Ch
		jz	short loc_149D
		cmp	al, 22h
		jz	short loc_14AB
		add	dx, cx
		jmp	short loc_1486
; ---------------------------------------------------------------------------

loc_14AB:				; ...
		mov	ax, cx
		shr	cx, 1
		adc	dx, cx
		test	al, 1
		jnz	short loc_1487
		jmp	short loc_144E
; ---------------------------------------------------------------------------

loc_14B7:				; ...
		push	ss
		pop	ds
		assume ds:seg000
		mov	argc, di
		add	dx, di
		inc	di
		shl	di, 1
		add	dx, di
		inc	dx
		and	dl, 0FEh
		sub	sp, dx
		mov	ax, sp
		mov	argv, ax
		mov	bx, ax
		add	di, bx
		push	ss
		pop	es
		mov	ss:[bx], di
		inc	bx
		inc	bx
		lds	si, dword_264A

loc_14DE:				; ...
		lodsb
		stosb
		or	al, al
		jnz	short loc_14DE
		mov	ds, word ptr ss:1624h
		mov	si, 81h
		jmp	short loc_14F1
; ---------------------------------------------------------------------------

loc_14EE:				; ...
		xor	ax, ax
		stosb

loc_14F1:				; ...
		lodsb
		cmp	al, 20h
		jz	short loc_14F1
		cmp	al, 9
		jz	short loc_14F1
		cmp	al, 0Dh
		jz	short loc_157A
		or	al, al
		jz	short loc_157A
		mov	ss:[bx], di
		inc	bx
		inc	bx

loc_1507:				; ...
		dec	si

loc_1508:				; ...
		lodsb
		cmp	al, 20h
		jz	short loc_14EE
		cmp	al, 9
		jz	short loc_14EE
		cmp	al, 0Dh
		jz	short loc_1577
		or	al, al
		jz	short loc_1577
		cmp	al, 22h
		jz	short loc_1544
		cmp	al, 5Ch
		jz	short loc_1524
		stosb
		jmp	short loc_1508
; ---------------------------------------------------------------------------

loc_1524:				; ...
		xor	cx, cx

loc_1526:				; ...
		inc	cx
		lodsb
		cmp	al, 5Ch
		jz	short loc_1526
		cmp	al, 22h
		jz	short loc_1536
		mov	al, 5Ch
		rep stosb
		jmp	short loc_1507
; ---------------------------------------------------------------------------

loc_1536:				; ...
		mov	al, 5Ch
		shr	cx, 1
		rep stosb
		jnb	short loc_1544
		mov	al, 22h
		stosb
		jmp	short loc_1508
; ---------------------------------------------------------------------------

loc_1543:				; ...
		dec	si

loc_1544:				; ...
		lodsb
		cmp	al, 0Dh
		jz	short loc_1577
		or	al, al
		jz	short loc_1577
		cmp	al, 22h
		jz	short loc_1508
		cmp	al, 5Ch
		jz	short loc_1558
		stosb
		jmp	short loc_1544
; ---------------------------------------------------------------------------

loc_1558:				; ...
		xor	cx, cx

loc_155A:				; ...
		inc	cx
		lodsb
		cmp	al, 5Ch
		jz	short loc_155A
		cmp	al, 22h
		jz	short loc_156A
		mov	al, 5Ch
		rep stosb
		jmp	short loc_1543
; ---------------------------------------------------------------------------

loc_156A:				; ...
		mov	al, 5Ch
		shr	cx, 1
		rep stosb
		jnb	short loc_1508
		mov	al, 22h
		stosb
		jmp	short loc_1544
; ---------------------------------------------------------------------------

loc_1577:				; ...
		xor	ax, ax
		stosb

loc_157A:				; ...
		push	ss
		pop	ds
		mov	word ptr [bx], 0
		jmp	word_2692
__setargv	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__setenvp	proc near		; ...
		push	bp
		mov	bp, sp
		push	ds
		mov	es, word_2624
		assume es:nothing
		mov	bx, es:2Ch
		mov	es, bx
		assume es:nothing
		xor	ax, ax
		xor	si, si
		xor	di, di
		mov	cx, 0FFFFh
		or	bx, bx
		jz	short loc_15AE
		cmp	byte ptr es:0, 0
		jz	short loc_15AE

loc_15A8:				; ...
		repne scasb
		inc	si
		scasb
		jnz	short loc_15A8

loc_15AE:				; ...
		mov	ax, di
		inc	ax
		and	al, 0FEh
		inc	si
		mov	di, si
		shl	si, 1
		mov	cx, 9
		call	__myalloc
		push	ax
		mov	ax, si
		call	__myalloc
		mov	envp, ax
		push	es
		push	ds
		pop	es
		assume es:seg000
		pop	ds
		mov	cx, di
		mov	bx, ax
		xor	si, si
		pop	di
		dec	cx
		jcxz	short loc_15FB

loc_15D5:				; ...
		mov	ax, [si]
		cmp	ax, ss:1602h
		jnz	short loc_15EE
		push	cx
		push	si
		push	di
		mov	di, 1602h
		mov	cx, 6
		repe cmpsw
		pop	di
		pop	si
		pop	cx
		jz	short loc_15F3

loc_15EE:				; ...
		mov	es:[bx], di
		inc	bx
		inc	bx

loc_15F3:				; ...
		lodsb
		stosb
		or	al, al
		jnz	short loc_15F3
		loop	loc_15D5

loc_15FB:				; ...
		mov	es:[bx], cx
		pop	ds
		pop	bp
		retn
__setenvp	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__NMSG_TEXT	proc near		; ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		pop	es
		mov	dx, [bp+arg_0]
		mov	si, 18A8h

loc_160F:				; ...
		lodsw
		cmp	ax, dx
		jz	short loc_1624
		inc	ax
		xchg	ax, si
		jz	short loc_1624
		xchg	ax, di
		xor	ax, ax
		mov	cx, 0FFFFh
		repne scasb
		mov	si, di
		jmp	short loc_160F
; ---------------------------------------------------------------------------

loc_1624:				; ...
		xchg	ax, si
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	2
__NMSG_TEXT	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__NMSG_WRITE	proc near		; ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	[bp+arg_0]
		call	__NMSG_TEXT
		or	ax, ax
		jz	short loc_165B
		xchg	ax, dx
		mov	di, dx
		xor	ax, ax
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		dec	cx
		mov	bx, 2
		cmp	word_287A, 0D6D6h
		jnz	short loc_1657
		call	off_287C

loc_1657:				; ...
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer

loc_165B:				; ...
		pop	di
		mov	sp, bp
		pop	bp
		retn	2
__NMSG_WRITE	endp

; ---------------------------------------------------------------------------

locret_1662:				; ...
		retf
; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int printf(const char	*, ...)
_printf		proc near		; ...

var_4		= word ptr -4
arg_0		= word ptr  4
arg_2		= byte ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	di
		push	si
		mov	si, 169Eh
		push	si
		call	__stbuf
		add	sp, 2
		mov	di, ax
		lea	ax, [bp+arg_2]
		push	ax
		push	[bp+arg_0]
		mov	ax, 169Eh
		push	ax
		call	__output
		add	sp, 6
		mov	[bp+var_4], ax
		mov	ax, 169Eh
		push	ax
		push	di
		call	__ftbuf
		add	sp, 4
		mov	ax, [bp+var_4]
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
_printf		endp

; ---------------------------------------------------------------------------

; int getche(void)
_getche:
		mov	dh, 1
		jmp	short loc_16A6

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; int getch(void)
_getch		proc near		; ...
		mov	dh, 8

loc_16A6:				; ...
		mov	ax, word_2694
		or	ah, ah
		jnz	short loc_16B5
		mov	word_2694, 0FFFFh
		jmp	short locret_16CB
; ---------------------------------------------------------------------------

loc_16B5:				; ...
		cmp	word_287A, 0D6D6h
		jnz	short loc_16C6
		push	bx
		mov	bx, 0FFFFh
		call	off_287C
		pop	bx

loc_16C6:				; ...
		xchg	ax, dx
		int	21h		; DOS -
		mov	ah, 0

locret_16CB:				; ...
		retn
_getch		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__myalloc	proc near		; ...
		push	bx
		push	es
		push	cx
		mov	cx, 400h
		xchg	cx, word_2846
		push	cx
		push	ax
		call	loc_21E3
		pop	bx
		pop	word_2846
		pop	cx
		mov	dx, ds
		or	ax, ax
		jz	short loc_16EA
		pop	es
		assume es:nothing
		pop	bx
		retn
; ---------------------------------------------------------------------------

loc_16EA:				; ...
		mov	ax, cx
		jmp	__amsg_exit
__myalloc	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__stbuf		proc near		; ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_0]
		mov	bx, 17D8h
		cmp	si, 169Eh
		jz	short loc_1713
		mov	bx, 17DAh
		cmp	si, 16A6h
		jz	short loc_1713
		mov	bx, 17DCh
		cmp	si, 16B6h
		jnz	short loc_175B

loc_1713:				; ...
		mov	di, si
		sub	di, 1696h
		add	di, 1736h
		test	byte ptr [si+6], 0Ch
		jnz	short loc_175B
		test	byte ptr [di], 1
		jnz	short loc_175B
		mov	ax, [bx]
		or	ax, ax
		jz	short loc_1749

loc_172E:				; ...
		mov	[si+4],	ax
		mov	[si], ax
		mov	word ptr [si+2], 200h
		mov	word ptr [di+2], 200h
		or	byte ptr [si+6], 2
		mov	byte ptr [di], 11h
		mov	ax, 1
		jmp	short loc_175D
; ---------------------------------------------------------------------------

loc_1749:				; ...
		push	bx
		mov	ax, 200h
		push	ax
		call	loc_21E3
		pop	bx
		pop	bx
		or	ax, ax
		jz	short loc_175B
		mov	[bx], ax
		jmp	short loc_172E
; ---------------------------------------------------------------------------

loc_175B:				; ...
		xor	ax, ax

loc_175D:				; ...
		pop	di
		pop	si
		pop	bp
		retn
__stbuf		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__ftbuf		proc near		; ...

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_2]
		mov	di, si
		sub	di, 1696h
		add	di, 1736h
		test	byte ptr [di], 10h
		jz	short loc_179B
		xor	bx, bx
		mov	bl, [si+7]
		test	byte ptr [bx+1630h], 40h
		jz	short loc_179B
		push	si
		call	__flush
		pop	ax
		cmp	[bp+arg_0], 0
		jz	short loc_179B
		xor	ax, ax
		mov	[di], al
		mov	[di+2],	ax
		mov	[si], ax
		mov	[si+4],	ax

loc_179B:				; ...
		pop	di
		pop	si
		pop	bp
		retn
__ftbuf		endp

; ---------------------------------------------------------------------------
		align 2
off_17A0	dw offset loc_1806	; ...
		dw offset loc_1811
		dw offset loc_1825
		dw offset loc_1859
		dw offset loc_1885
		dw offset loc_188D
		dw offset loc_18B6
		dw offset loc_18E8

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__output	proc near		; ...

var_214		= byte ptr -214h
var_211		= byte ptr -211h
var_210		= byte ptr -210h
var_20C		= byte ptr -20Ch
var_15		= byte ptr -15h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= word ptr -4
var_2		= byte ptr -2
var_1		= byte ptr -1
arg_2		= word ptr  6
arg_4		= word ptr  8

; FUNCTION CHUNK AT 0C7F SIZE 00000006 BYTES

		push	bp
		mov	bp, sp
		mov	ax, 214h
		call	__aNchkstk
		push	si
		push	di
		xor	ax, ax
		mov	[bp+var_8], ax
		mov	[bp+var_5], al

loc_17C3:				; ...
		mov	si, [bp+arg_2]
		lodsb
		mov	[bp+arg_2], si
		mov	[bp+var_2], al
		or	al, al
		jz	short loc_17D7
		cmp	[bp+var_8], 0
		jge	short loc_17DD

loc_17D7:				; ...
		mov	ax, [bp+var_8]
		jmp	loc_1C7F
; ---------------------------------------------------------------------------

loc_17DD:				; ...
		mov	bx, 17DEh
		sub	al, 20h
		cmp	al, 58h
		ja	short loc_17EB
		xlat
		and	al, 0Fh
		jmp	short loc_17ED
; ---------------------------------------------------------------------------

loc_17EB:				; ...
		mov	al, 0

loc_17ED:				; ...
		mov	cl, 3
		shl	al, cl
		add	al, [bp+var_5]
		xlat
		inc	cl
		shr	al, cl
		mov	[bp+var_5], al
		cbw
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_17A0[bx]
; ---------------------------------------------------------------------------

loc_1806:				; ...
		mov	dl, [bp+var_2]
		mov	cx, 1
		call	loc_1C32
		jmp	short loc_17C3
; ---------------------------------------------------------------------------

loc_1811:				; ...
		xor	ax, ax
		mov	[bp+var_10], ax
		mov	[bp+var_A], ax
		mov	[bp+var_12], ax
		mov	[bp+var_4], ax
		dec	ax
		mov	[bp+var_C], ax
		jmp	short loc_17C3
; ---------------------------------------------------------------------------

loc_1825:				; ...
		mov	al, [bp+var_2]
		cmp	al, 2Dh
		jnz	short loc_1832
		or	byte ptr [bp+var_4], 4
		jmp	short loc_17C3
; ---------------------------------------------------------------------------

loc_1832:				; ...
		cmp	al, 2Bh
		jnz	short loc_183C
		or	byte ptr [bp+var_4], 1
		jmp	short loc_17C3
; ---------------------------------------------------------------------------

loc_183C:				; ...
		cmp	al, 20h
		jnz	short loc_1847
		or	byte ptr [bp+var_4], 2
		jmp	loc_17C3
; ---------------------------------------------------------------------------

loc_1847:				; ...
		cmp	al, 23h
		jnz	short loc_1852
		or	byte ptr [bp+var_4], 80h
		jmp	loc_17C3
; ---------------------------------------------------------------------------

loc_1852:				; ...
		or	byte ptr [bp+var_4], 8
		jmp	loc_17C3
; ---------------------------------------------------------------------------

loc_1859:				; ...
		mov	cl, [bp+var_2]
		cmp	cl, 2Ah
		jnz	short loc_1870
		call	loc_1BBA
		or	ax, ax
		jns	short loc_187F
		neg	ax
		or	byte ptr [bp+var_4], 4
		jmp	short loc_187F
; ---------------------------------------------------------------------------

loc_1870:				; ...
		sub	cl, 30h
		xor	ch, ch
		mov	ax, [bp+var_A]
		mov	bx, 0Ah
		mul	bx
		add	ax, cx

loc_187F:				; ...
		mov	[bp+var_A], ax
		jmp	loc_17C3
; ---------------------------------------------------------------------------

loc_1885:				; ...
		mov	[bp+var_C], 0
		jmp	loc_17C3
; ---------------------------------------------------------------------------

loc_188D:				; ...
		mov	cl, [bp+var_2]
		cmp	cl, 2Ah
		jnz	short loc_18A1
		call	loc_1BBA
		or	ax, ax
		jns	short loc_18B0
		mov	ax, 0FFFFh
		jmp	short loc_18B0
; ---------------------------------------------------------------------------

loc_18A1:				; ...
		sub	cl, 30h
		xor	ch, ch
		mov	ax, [bp+var_C]
		mov	bx, 0Ah
		mul	bx
		add	ax, cx

loc_18B0:				; ...
		mov	[bp+var_C], ax
		jmp	loc_17C3
; ---------------------------------------------------------------------------

loc_18B6:				; ...
		mov	al, [bp+var_2]
		cmp	al, 6Ch
		jnz	short loc_18C3
		or	byte ptr [bp+var_4], 10h
		jmp	short loc_18E5
; ---------------------------------------------------------------------------

loc_18C3:				; ...
		cmp	al, 46h
		jnz	short loc_18CD
		or	byte ptr [bp+var_4], 20h
		jmp	short loc_18E5
; ---------------------------------------------------------------------------

loc_18CD:				; ...
		cmp	al, 4Eh
		jnz	short loc_18D7
		or	byte ptr [bp+var_4+1], 10h
		jmp	short loc_18E5
; ---------------------------------------------------------------------------

loc_18D7:				; ...
		cmp	al, 4Ch
		jnz	short loc_18E1
		or	byte ptr [bp+var_4+1], 4
		jmp	short loc_18E5
; ---------------------------------------------------------------------------

loc_18E1:				; ...
		or	byte ptr [bp+var_4+1], 8

loc_18E5:				; ...
		jmp	loc_17C3
; ---------------------------------------------------------------------------

loc_18E8:				; ...
		mov	al, [bp+var_2]
		cmp	al, 64h
		jnz	short loc_18F2
		jmp	loc_1A80
; ---------------------------------------------------------------------------

loc_18F2:				; ...
		cmp	al, 69h
		jnz	short loc_18F9
		jmp	loc_1A80
; ---------------------------------------------------------------------------

loc_18F9:				; ...
		cmp	al, 75h
		jnz	short loc_1900
		jmp	loc_1A84
; ---------------------------------------------------------------------------

loc_1900:				; ...
		cmp	al, 58h
		jnz	short loc_1907
		jmp	loc_1A8A
; ---------------------------------------------------------------------------

loc_1907:				; ...
		cmp	al, 78h
		jnz	short loc_190E
		jmp	loc_1A90
; ---------------------------------------------------------------------------

loc_190E:				; ...
		cmp	al, 6Fh
		jnz	short loc_1915
		jmp	loc_1AB1
; ---------------------------------------------------------------------------

loc_1915:				; ...
		cmp	al, 63h
		jz	short loc_1933
		cmp	al, 73h
		jz	short loc_1944
		cmp	al, 6Eh
		jz	short loc_1972
		cmp	al, 70h
		jz	short loc_1985
		cmp	al, 45h
		jz	short loc_1930
		cmp	al, 47h
		jz	short loc_1930
		jmp	loc_19EB
; ---------------------------------------------------------------------------

loc_1930:				; ...
		jmp	loc_19E8
; ---------------------------------------------------------------------------

loc_1933:				; ...
		call	loc_1BBA
		lea	di, [bp+var_214]
		push	ss
		pop	es
		stosb
		dec	di
		mov	cx, 1
		jmp	loc_1B2F
; ---------------------------------------------------------------------------

loc_1944:				; ...
		call	loc_1BCE
		or	di, di
		jnz	short loc_195D
		mov	ax, es
		or	ax, ax
		jnz	short loc_195D
		push	ds
		pop	es
		assume es:seg000
		mov	di, 1837h
		mov	cx, word_283D
		jmp	loc_1B2F
; ---------------------------------------------------------------------------

loc_195D:				; ...
		push	di
		mov	cx, [bp+var_C]
		jcxz	short loc_196A
		xor	al, al
		repne scasb
		jnz	short loc_196A
		dec	di

loc_196A:				; ...
		pop	cx
		sub	di, cx
		xchg	cx, di
		jmp	loc_1B2F
; ---------------------------------------------------------------------------

loc_1972:				; ...
		call	loc_1BCE
		mov	ax, [bp+var_8]
		stosw
		test	byte ptr [bp+var_4], 10h
		jz	short loc_1982
		xor	ax, ax
		stosw

loc_1982:				; ...
		jmp	loc_17C3
; ---------------------------------------------------------------------------

loc_1985:				; ...
		test	byte ptr [bp+var_4], 30h
		jnz	short loc_1990
		call	loc_1BBA
		jmp	short loc_19C9
; ---------------------------------------------------------------------------

loc_1990:				; ...
		call	loc_1BC2
		test	byte ptr [bp+var_4+1], 18h
		jnz	short loc_19C9
		mov	[bp+var_1], 7
		mov	cx, 10h
		push	ss
		pop	es
		assume es:nothing
		push	dx
		xor	dx, dx
		lea	di, [bp+var_20C]
		mov	si, 4
		call	loc_1C4E
		mov	cx, 10h
		lea	di, [bp+var_211]
		pop	ax
		xor	dx, dx
		mov	si, 4
		call	loc_1C4E
		mov	[bp+var_210], 3Ah
		mov	cx, 9
		jmp	short loc_19E1
; ---------------------------------------------------------------------------

loc_19C9:				; ...
		mov	[bp+var_1], 7
		mov	cx, 10h
		push	ss
		pop	es
		xor	dx, dx
		lea	di, [bp+var_211]
		mov	si, 4
		call	loc_1C4E
		mov	cx, 4

loc_19E1:				; ...
		lea	di, [bp+var_214]
		jmp	loc_1B2F
; ---------------------------------------------------------------------------

loc_19E8:				; ...
		inc	[bp+var_12]

loc_19EB:				; ...
		or	byte ptr [bp+var_4], 40h
		mov	al, [bp+var_2]
		or	al, 20h
		cbw
		mov	si, ax
		cmp	[bp+var_C], 0
		jg	short loc_1A10
		jz	short loc_1A06
		mov	[bp+var_C], 6
		jmp	short loc_1A10
; ---------------------------------------------------------------------------

loc_1A06:				; ...
		cmp	ax, 67h
		jnz	short loc_1A10
		mov	[bp+var_C], 1

loc_1A10:				; ...
		lea	di, [bp+var_214]
		push	[bp+var_12]
		push	[bp+var_C]
		push	si
		push	di
		push	[bp+arg_4]
		test	byte ptr [bp+var_4+1], 4
		jz	short loc_1A2F
		call	off_2852
		add	[bp+arg_4], 0Ah
		jmp	short loc_1A37
; ---------------------------------------------------------------------------

loc_1A2F:				; ...
		call	off_2848
		add	[bp+arg_4], 8

loc_1A37:				; ...
		add	sp, 0Ah
		test	byte ptr [bp+var_4], 80h
		jz	short loc_1A4E
		cmp	[bp+var_C], 0
		jnz	short loc_1A4E
		push	di
		call	off_284E
		add	sp, 2

loc_1A4E:				; ...
		cmp	si, 67h
		jnz	short loc_1A62
		test	[bp+var_4], 80h
		jnz	short loc_1A62
		push	di
		call	off_284C
		add	sp, 2

loc_1A62:				; ...
		push	ss
		pop	es
		cmp	byte ptr es:[di], 2Dh
		jnz	short loc_1A6F
		inc	di
		or	byte ptr [bp+var_4+1], 1

loc_1A6F:				; ...
		mov	cx, 0FFFFh
		push	di
		mov	al, 0
		repne scasb
		dec	di
		pop	cx
		sub	di, cx
		xchg	cx, di
		jmp	loc_1B2F
; ---------------------------------------------------------------------------

loc_1A80:				; ...
		or	byte ptr [bp+var_4], 40h

loc_1A84:				; ...
		mov	[bp+var_6], 0Ah
		jmp	short loc_1ABF
; ---------------------------------------------------------------------------

loc_1A8A:				; ...
		mov	[bp+var_1], 7
		jmp	short loc_1A94
; ---------------------------------------------------------------------------

loc_1A90:				; ...
		mov	[bp+var_1], 27h

loc_1A94:				; ...
		test	byte ptr [bp+var_4], 80h
		jz	short loc_1AAB
		mov	[bp+var_10], 2
		mov	[bp+var_E], 30h
		mov	dl, 51h
		add	dl, [bp+var_1]
		mov	[bp+var_D], dl

loc_1AAB:				; ...
		mov	[bp+var_6], 10h
		jmp	short loc_1ABF
; ---------------------------------------------------------------------------

loc_1AB1:				; ...
		test	byte ptr [bp+var_4], 80h
		jz	short loc_1ABB
		or	byte ptr [bp+var_4+1], 2

loc_1ABB:				; ...
		mov	[bp+var_6], 8

loc_1ABF:				; ...
		test	byte ptr [bp+var_4], 10h
		jz	short loc_1ACA
		call	loc_1BC2
		jmp	short loc_1AD8
; ---------------------------------------------------------------------------

loc_1ACA:				; ...
		call	loc_1BBA
		test	byte ptr [bp+var_4], 40h
		jz	short loc_1AD6
		cwd
		jmp	short loc_1AD8
; ---------------------------------------------------------------------------

loc_1AD6:				; ...
		xor	dx, dx

loc_1AD8:				; ...
		test	byte ptr [bp+var_4], 40h
		jz	short loc_1AED
		or	dx, dx
		jge	short loc_1AED
		or	byte ptr [bp+var_4+1], 1
		neg	ax
		adc	dx, 0
		neg	dx

loc_1AED:				; ...
		cmp	[bp+var_C], 0
		jge	short loc_1AFA
		mov	[bp+var_C], 1
		jmp	short loc_1AFE
; ---------------------------------------------------------------------------

loc_1AFA:				; ...
		and	byte ptr [bp+var_4], 0F7h

loc_1AFE:				; ...
		mov	bx, ax
		or	bx, dx
		jnz	short loc_1B09
		mov	[bp+var_10], 0

loc_1B09:				; ...
		lea	di, [bp+var_15]
		push	ss
		pop	es
		mov	cl, [bp+var_6]
		xor	ch, ch
		mov	si, [bp+var_C]
		call	loc_1C4E
		test	byte ptr [bp+var_4+1], 2
		jz	short loc_1B2D
		jcxz	short loc_1B27
		cmp	byte ptr es:[di], 30h
		jz	short loc_1B2D

loc_1B27:				; ...
		dec	di
		mov	byte ptr es:[di], 30h
		inc	cx

loc_1B2D:				; ...
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_1B2F:				; ...
		test	byte ptr [bp+var_4], 40h
		jz	short loc_1B66
		test	byte ptr [bp+var_4+1], 1
		jz	short loc_1B46
		mov	[bp+var_E], 2Dh
		mov	[bp+var_10], 1
		jmp	short loc_1B66
; ---------------------------------------------------------------------------

loc_1B46:				; ...
		test	byte ptr [bp+var_4], 1
		jz	short loc_1B57
		mov	[bp+var_E], 2Bh
		mov	[bp+var_10], 1
		jmp	short loc_1B66
; ---------------------------------------------------------------------------

loc_1B57:				; ...
		test	byte ptr [bp+var_4], 2
		jz	short loc_1B66
		mov	[bp+var_E], 20h
		mov	[bp+var_10], 1

loc_1B66:				; ...
		mov	ax, [bp+var_A]
		sub	ax, cx
		sub	ax, [bp+var_10]
		jge	short loc_1B72
		xor	ax, ax

loc_1B72:				; ...
		push	es
		push	di
		push	cx
		test	byte ptr [bp+var_4], 0Ch
		jnz	short loc_1B82
		mov	cx, ax
		mov	dl, 20h
		call	loc_1C32

loc_1B82:				; ...
		push	ax
		push	ss
		pop	es
		lea	di, [bp+var_E]
		mov	cx, [bp+var_10]
		call	loc_1C14
		pop	ax
		test	byte ptr [bp+var_4], 8
		jz	short loc_1BA2
		test	byte ptr [bp+var_4], 4
		jnz	short loc_1BA2
		mov	cx, ax
		mov	dl, 30h
		call	loc_1C32

loc_1BA2:				; ...
		pop	cx
		pop	di
		pop	es
		push	ax
		call	loc_1C14
		pop	ax
		test	byte ptr [bp+var_4], 4
		jz	short loc_1BB7
		mov	cx, ax
		mov	dl, 20h
		call	loc_1C32

loc_1BB7:				; ...
		jmp	loc_17C3
__output	endp

; ---------------------------------------------------------------------------

loc_1BBA:				; ...
		mov	si, [bp+8]
		lodsw
		mov	[bp+8],	si
		retn
; ---------------------------------------------------------------------------

loc_1BC2:				; ...
		mov	si, [bp+8]
		lodsw
		mov	dx, ax
		lodsw
		xchg	ax, dx
		mov	[bp+8],	si
		retn
; ---------------------------------------------------------------------------

loc_1BCE:				; ...
		test	byte ptr [bp-4], 20h
		jz	short loc_1BDC
		call	loc_1BC2
		mov	es, dx
		mov	di, ax
		retn
; ---------------------------------------------------------------------------

loc_1BDC:				; ...
		call	loc_1BBA
		mov	di, ax
		or	ax, ax
		jnz	short loc_1BE8
		mov	es, ax
		retn
; ---------------------------------------------------------------------------

loc_1BE8:				; ...
		push	ds
		pop	es
		assume es:seg000
		retn
; ---------------------------------------------------------------------------

loc_1BEB:				; ...
		cbw
		push	di
		mov	bx, [bp+4]
		dec	word ptr [bx+2]
		js	short loc_1BFF
		mov	di, [bx]
		inc	word ptr [bx]
		mov	[di], al

loc_1BFB:				; ...
		xor	ax, ax

loc_1BFD:				; ...
		pop	di
		retn
; ---------------------------------------------------------------------------

loc_1BFF:				; ...
		push	es
		push	cx
		push	dx
		push	bx
		push	ax
		call	__flsbuf
		add	sp, 4
		pop	dx
		pop	cx
		pop	es
		assume es:nothing
		cmp	ax, 0FFFFh
		jnz	short loc_1BFB
		jmp	short loc_1BFD
; ---------------------------------------------------------------------------

loc_1C14:				; ...
		jcxz	short locret_1C31
		mov	si, di
		add	[bp-8],	cx
		push	di
		xor	di, di

loc_1C1E:				; ...
		lods	byte ptr es:[si]
		call	loc_1BEB
		or	di, ax
		loop	loc_1C1E
		or	di, di
		pop	di
		jz	short locret_1C31
		mov	word ptr [bp-8], 0FFFFh

locret_1C31:				; ...
		retn
; ---------------------------------------------------------------------------

loc_1C32:				; ...
		jcxz	short locret_1C4D
		add	[bp-8],	cx
		push	di
		xor	di, di

loc_1C3A:				; ...
		mov	al, dl
		call	loc_1BEB
		or	di, ax
		loop	loc_1C3A
		or	di, di
		pop	di
		jz	short locret_1C4D
		mov	word ptr [bp-8], 0FFFFh

locret_1C4D:				; ...
		retn
; ---------------------------------------------------------------------------

loc_1C4E:				; ...
		std
		push	di
		xchg	ax, bx

loc_1C51:				; ...
		or	si, si
		jg	short loc_1C5F
		or	bx, bx
		jnz	short loc_1C5F
		or	dx, dx
		jnz	short loc_1C5F
		jmp	short loc_1C79
; ---------------------------------------------------------------------------

loc_1C5F:				; ...
		xchg	ax, dx
		xor	dx, dx
		div	cx
		xchg	ax, bx
		div	cx
		xchg	ax, dx
		xchg	dx, bx
		add	al, 30h
		cmp	al, 39h
		jbe	short loc_1C73
		add	al, [bp-1]

loc_1C73:				; ...
		stosb
		mov	ax, dx
		dec	si
		jmp	short loc_1C51
; ---------------------------------------------------------------------------

loc_1C79:				; ...
		pop	cx
		sub	cx, di
		inc	di
		cld
		retn
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR __output

loc_1C7F:				; ...
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
; END OF FUNCTION CHUNK	FOR __output
; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__aNchkstk	proc near		; ...
		pop	cx
		mov	bx, sp
		sub	bx, ax
		jb	short loc_1C97
		cmp	bx, word_2842
		jb	short loc_1C97
		mov	sp, bx
		jmp	cx
; ---------------------------------------------------------------------------

loc_1C97:				; ...
		push	cx
		xor	ax, ax
		jmp	__amsg_exit
__aNchkstk	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__endstdio	proc near
		push	bp
		mov	bp, sp
		call	__flushall
		mov	al, byte_2657
		or	al, al
		jz	short loc_1CAE
		call	loc_221E

loc_1CAE:				; ...
		pop	bp
		retn
__endstdio	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl _flsbuf(int, FILE	*)
__flsbuf	proc near		; ...

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_2]
		mov	al, [si+6]
		test	al, 82h
		jz	short loc_1D27
		test	al, 40h
		jnz	short loc_1D27
		mov	word ptr [si+2], 0
		test	al, 1
		jz	short loc_1CD7
		test	al, 10h
		jz	short loc_1D27
		mov	cx, [si+4]
		mov	[si], cx
		and	al, 0FEh

loc_1CD7:				; ...
		or	al, 2
		and	al, 0EFh
		mov	[si+6],	al
		mov	di, si
		sub	di, 1696h
		add	di, 1736h
		xor	bx, bx
		mov	bl, [si+7]
		test	al, 8
		jnz	short loc_1D3D
		test	al, 4
		jnz	short loc_1D13
		test	byte ptr [di], 1
		jnz	short loc_1D3D
		cmp	si, 169Eh
		jz	short loc_1D0C
		cmp	si, 16A6h
		jz	short loc_1D0C
		cmp	si, 16B6h
		jnz	short loc_1D30

loc_1D0C:				; ...
		test	byte ptr [bx+1630h], 40h
		jz	short loc_1D30

loc_1D13:				; ...
		mov	cx, 1
		lea	di, [bp+arg_0]
		push	cx
		push	di
		push	bx
		call	loc_2084
		add	sp, 6
		mov	cx, 1
		jmp	short loc_1D65
; ---------------------------------------------------------------------------

loc_1D27:				; ...
		mov	ax, 0FFFFh
		or	byte ptr [si+6], 20h
		jmp	short loc_1D8C
; ---------------------------------------------------------------------------

loc_1D30:				; ...
		push	bx
		push	si
		call	__getbuf
		pop	bx
		pop	bx
		test	byte ptr [si+6], 8
		jz	short loc_1D13

loc_1D3D:				; ...
		mov	cx, [si]
		mov	dx, [si+4]
		sub	cx, dx
		inc	dx
		mov	[si], dx
		mov	dx, [di+2]
		dec	dx
		mov	[si+2],	dx
		jcxz	short loc_1D70
		push	cx
		push	cx
		push	word ptr [si+4]
		push	bx
		call	loc_2084
		add	sp, 6
		pop	cx

loc_1D5D:				; ...
		mov	di, [si+4]
		mov	dx, [bp+arg_0]
		mov	[di], dl

loc_1D65:				; ...
		cmp	ax, cx
		jnz	short loc_1D27
		xor	ax, ax
		mov	al, byte ptr [bp+arg_0]
		jmp	short loc_1D8C
; ---------------------------------------------------------------------------

loc_1D70:				; ...
		xor	ax, ax
		test	byte ptr [bx+1630h], 20h
		jz	short loc_1D5D
		mov	cx, 2
		push	cx		; int
		push	ax
		push	ax		; __int32
		push	bx		; int
		call	__lseek
		add	sp, 8
		xor	ax, ax
		mov	cx, ax
		jmp	short loc_1D5D
; ---------------------------------------------------------------------------

loc_1D8C:				; ...
		pop	di
		pop	si
		pop	bp
		retn
__flsbuf	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl fflush(FILE *)
_fflush		proc near		; ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		cmp	[bp+arg_0], 0
		jnz	short loc_1DA2
		xor	ax, ax
		push	ax
		call	flsall
		jmp	short loc_1DD9
; ---------------------------------------------------------------------------

loc_1DA2:				; ...
		push	[bp+arg_0]
		call	__flush
		add	sp, 2
		or	ax, ax
		jz	short loc_1DB4
		mov	ax, 0FFFFh
		jmp	short loc_1DD9
; ---------------------------------------------------------------------------

loc_1DB4:				; ...
		mov	si, [bp+arg_0]
		sub	si, 1696h
		add	si, 1736h
		test	byte ptr [si], 40h
		jz	short loc_1DD9
		mov	bx, [bp+arg_0]
		sub	ah, ah
		mov	al, [bx+7]
		push	ax
		call	loc_2242
		add	sp, 2
		cmp	ax, 1
		cmc
		sbb	ax, ax

loc_1DD9:				; ...
		pop	si
		mov	sp, bp
		pop	bp
		retn
_fflush		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__flush		proc near		; ...

var_2		= word ptr -2
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	di
		push	si
		xor	di, di
		mov	ax, [bp+arg_0]
		mov	bx, ax
		mov	si, ax
		mov	cl, [bx+6]
		mov	dx, cx
		and	cl, 3
		cmp	cl, 2
		jnz	short loc_1E41
		test	dl, 8
		jnz	short loc_1E0C
		sub	bx, 1696h
		test	byte ptr [bx+1736h], 1
		jz	short loc_1E41

loc_1E0C:				; ...
		mov	ax, [si]
		sub	ax, [si+4]
		mov	[bp+var_2], ax
		or	ax, ax
		jle	short loc_1E41
		push	ax
		push	word ptr [si+4]
		mov	al, [si+7]
		sub	ah, ah
		push	ax
		call	loc_2084
		add	sp, 6
		cmp	ax, [bp+var_2]
		jnz	short loc_1E3A
		test	byte ptr [si+6], 80h
		jz	short loc_1E41
		and	byte ptr [si+6], 0FDh
		jmp	short loc_1E41
; ---------------------------------------------------------------------------
		align 2

loc_1E3A:				; ...
		or	byte ptr [si+6], 20h
		mov	di, 0FFFFh

loc_1E41:				; ...
		mov	ax, [si+4]
		mov	[si], ax
		mov	word ptr [si+2], 0
		mov	ax, di
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
__flush		endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; int _flushall(void)
__flushall	proc near		; ...
		mov	ax, 1
		push	ax
		call	flsall
		retn
__flushall	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function static bp-based frame

flsall		proc near		; ...

var_2		= word ptr -2
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	di
		push	si
		mov	si, 1696h
		xor	di, di
		mov	[bp+var_2], di
		jmp	short loc_1E8C
; ---------------------------------------------------------------------------

loc_1E6E:				; ...
		cmp	[bp+arg_0], 0
		jnz	short loc_1E89
		test	byte ptr [si+6], 2
		jz	short loc_1E89
		push	si		; FILE *
		call	_fflush
		add	sp, 2
		inc	ax
		jnz	short loc_1E89
		mov	[bp+var_2], 0FFFFh

loc_1E89:				; ...
		add	si, 8

loc_1E8C:				; ...
		cmp	word_27D6, si
		jb	short loc_1EAC
		cmp	[bp+arg_0], 1
		jnz	short loc_1E6E
		test	byte ptr [si+6], 83h
		jz	short loc_1E6E
		push	si		; FILE *
		call	_fflush
		add	sp, 2
		inc	ax
		jz	short loc_1E89
		inc	di
		jmp	short loc_1E89
; ---------------------------------------------------------------------------
		align 2

loc_1EAC:				; ...
		cmp	[bp+arg_0], 1
		jnz	short loc_1EB6
		mov	ax, di
		jmp	short loc_1EB9
; ---------------------------------------------------------------------------

loc_1EB6:				; ...
		mov	ax, [bp+var_2]

loc_1EB9:				; ...
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn	2
flsall		endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__growseg	proc near		; ...
		push	cx
		push	di
		test	byte ptr [bx+2], 1
		jz	short loc_1F2D
		call	__findlast
		mov	di, si
		mov	ax, [si]
		test	al, 1
		jz	short loc_1ED8
		sub	cx, ax
		dec	cx

loc_1ED8:				; ...
		inc	cx
		inc	cx
		mov	si, [bx+4]
		or	si, si
		jz	short loc_1F2D
		add	cx, si
		jnb	short loc_1EEE
		xor	ax, ax
		mov	dx, 0FFF0h
		jcxz	short loc_1F1C
		jmp	short loc_1F2D
; ---------------------------------------------------------------------------

loc_1EEE:				; ...
		push	ss
		pop	es
		mov	ax, es:1846h
		cmp	ax, 2000h
		jz	short loc_1F0F
		mov	dx, 8000h

loc_1EFC:				; ...
		cmp	dx, ax
		jb	short loc_1F06
		shr	dx, 1
		jnz	short loc_1EFC
		jmp	short loc_1F28
; ---------------------------------------------------------------------------

loc_1F06:				; ...
		cmp	dx, 8
		jb	short loc_1F28
		shl	dx, 1
		mov	ax, dx

loc_1F0F:				; ...
		dec	ax
		mov	dx, ax
		add	ax, cx
		jnb	short loc_1F18
		xor	ax, ax

loc_1F18:				; ...
		not	dx
		and	ax, dx

loc_1F1C:				; ...
		push	dx
		call	__incseg
		pop	dx
		jnb	short loc_1F30
		cmp	dx, 0FFF0h
		jz	short loc_1F2D

loc_1F28:				; ...
		mov	ax, 10h
		jmp	short loc_1F0F
; ---------------------------------------------------------------------------

loc_1F2D:				; ...
		stc
		jmp	short loc_1F4B
; ---------------------------------------------------------------------------

loc_1F30:				; ...
		mov	dx, ax
		sub	dx, [bx+4]
		mov	[bx+4],	ax
		mov	[bx+8],	di
		mov	si, [bx+0Ah]
		dec	dx
		mov	[si], dx
		inc	dx
		add	si, dx
		mov	word ptr [si], 0FFFEh
		mov	[bx+0Ah], si

loc_1F4B:				; ...
		pop	di
		pop	cx
		retn
__growseg	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__incseg	proc near		; ...
		mov	dx, ax
		test	byte ptr [bx+2], 4
		jz	short loc_1F65
		dec	dx
		mov	si, [bx+4]
		dec	si
		cmp	dx, si
		jbe	short loc_1F64
		cmp	[bx-2],	dx
		jnb	short loc_1F9A

loc_1F64:				; ...
		inc	dx

loc_1F65:				; ...
		push	bx
		push	cx
		mov	si, ds
		mov	es, si
		assume es:seg000
		mov	cl, 4
		shr	ax, cl
		jnz	short loc_1F74
		mov	ax, 1000h

loc_1F74:				; ...
		test	byte ptr [bx+2], 4
		jz	short loc_1F84
		add	ax, si
		mov	bx, word_2624
		sub	ax, bx
		mov	es, bx
		assume es:nothing

loc_1F84:				; ...
		mov	bx, ax
		mov	ah, 4Ah
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		pop	cx
		pop	bx
		jb	short locret_1F9E
		mov	ax, dx
		test	byte ptr [bx+2], 4
		jz	short loc_1F9A
		dec	dx
		mov	[bx-2],	dx

loc_1F9A:				; ...
		clc
		jmp	short locret_1F9E
; ---------------------------------------------------------------------------
		stc

locret_1F9E:				; ...
		retn
__incseg	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__findlast	proc near		; ...
		push	di
		mov	si, [bx+8]
		cmp	si, [bx+0Ah]
		jnz	short loc_1FAB
		mov	si, [bx+6]

loc_1FAB:				; ...
		lodsw
		cmp	ax, 0FFFEh
		jz	short loc_1FB9
		mov	di, si
		and	al, 0FEh
		add	si, ax
		jmp	short loc_1FAB
; ---------------------------------------------------------------------------

loc_1FB9:				; ...
		dec	di
		dec	di
		mov	si, di
		pop	di
		retn
__findlast	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__getbuf	proc near		; ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+arg_0]
		mov	ax, 200h
		push	ax
		call	loc_21E3
		pop	cx
		mov	bx, si
		sub	bx, 1696h
		add	bx, 1736h
		or	ax, ax
		jz	short loc_1FE8
		or	byte ptr [si+6], 8
		mov	word ptr [bx+2], 200h
		jmp	short loc_1FF4
; ---------------------------------------------------------------------------

loc_1FE8:				; ...
		or	byte ptr [si+6], 4
		mov	word ptr [bx+2], 1
		lea	ax, [bx+1]

loc_1FF4:				; ...
		mov	[si], ax
		mov	[si+4],	ax
		mov	word ptr [si+2], 0
		pop	si
		pop	bp
		retn
__getbuf	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __int32 __cdecl _lseek(int, __int32, int)
__lseek		proc near		; ...

var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= dword	ptr  6
arg_6		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 4
		mov	bx, [bp+arg_0]
		cmp	bx, word_262E
		jb	short loc_2016
		mov	ax, 900h
		jmp	short loc_2047
; ---------------------------------------------------------------------------

loc_2016:				; ...
		cmp	word_2876, 0
		jz	short loc_206C
		test	word ptr [bp+arg_2+2], 8000h
		jz	short loc_206C
		cmp	[bp+arg_6], 0
		jz	short loc_2044
		xor	cx, cx
		mov	dx, cx
		mov	ax, 4201h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		jb	short loc_2080
		test	[bp+arg_6], 2
		jnz	short loc_204A
		add	ax, word ptr [bp+arg_2]
		adc	dx, word ptr [bp+arg_2+2]
		jns	short loc_206C

loc_2044:				; ...
		mov	ax, 1600h

loc_2047:				; ...
		stc
		jmp	short loc_2080
; ---------------------------------------------------------------------------

loc_204A:				; ...
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	dx, cx
		mov	ax, 4202h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		add	ax, word ptr [bp+arg_2]
		adc	dx, word ptr [bp+arg_2+2]
		jns	short loc_206C
		mov	cx, [bp+var_2]
		mov	dx, [bp+var_4]
		mov	ax, 4200h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from beginning of	file
		jmp	short loc_2044
; ---------------------------------------------------------------------------

loc_206C:				; ...
		mov	dx, word ptr [bp+arg_2]
		mov	cx, word ptr [bp+arg_2+2]
		mov	al, byte ptr [bp+arg_6]
		mov	ah, 42h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		jb	short loc_2080
		and	byte ptr [bx+1630h], 0FDh

loc_2080:				; ...
		jmp	loc_22AF
; ---------------------------------------------------------------------------
		align 2

loc_2084:				; ...
		push	bp
		mov	bp, sp
		sub	sp, 8
		mov	bx, [bp+arg_0]
		cmp	bx, word_262E
		jb	short loc_209A
		mov	ax, 900h
		stc

loc_2097:				; ...
		jmp	loc_22AF
; ---------------------------------------------------------------------------

loc_209A:				; ...
		cmp	word_287A, 0D6D6h
		jnz	short loc_20A6
		call	off_287C

loc_20A6:				; ...
		test	byte ptr [bx+1630h], 20h
		jz	short loc_20B8
		mov	ax, 4202h
		xor	cx, cx
		mov	dx, cx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		jb	short loc_2097

loc_20B8:				; ...
		test	byte ptr [bx+1630h], 80h
		jz	short loc_212D
		mov	dx, word ptr [bp+arg_2]
		push	ds
		pop	es
		assume es:seg000
		xor	ax, ax
		mov	[bp+var_2], ax
		mov	[bp+var_4], ax
		cld
		push	di
		push	si
		mov	di, dx
		mov	si, dx
		mov	[bp+var_8], sp
		mov	cx, word ptr [bp+arg_2+2]
		jcxz	short loc_2113
		mov	al, 0Ah
		repne scasb
		jnz	short loc_212B
		call	loc_23A6
		cmp	ax, 0A8h
		jbe	short loc_212F
		sub	sp, 2
		mov	bx, sp
		mov	dx, 200h
		cmp	ax, 228h
		jnb	short loc_20F9
		mov	dx, 80h

loc_20F9:				; ...
		sub	sp, dx
		mov	dx, sp
		mov	di, dx
		push	ss
		pop	es
		assume es:nothing
		mov	cx, word ptr [bp+arg_2+2]

loc_2104:				; ...
		lodsb
		cmp	al, 0Ah
		jz	short loc_2115

loc_2109:				; ...
		cmp	di, bx
		jz	short loc_2126

loc_210D:				; ...
		stosb
		loop	loc_2104
		call	loc_2135

loc_2113:				; ...
		jmp	short loc_217F
; ---------------------------------------------------------------------------

loc_2115:				; ...
		mov	al, 0Dh
		cmp	di, bx
		jnz	short loc_211E
		call	loc_2135

loc_211E:				; ...
		stosb
		mov	al, 0Ah
		inc	[bp+var_4]
		jmp	short loc_2109
; ---------------------------------------------------------------------------

loc_2126:				; ...
		call	loc_2135
		jmp	short loc_210D
; ---------------------------------------------------------------------------

loc_212B:				; ...
		pop	si
		pop	di

loc_212D:				; ...
		jmp	short loc_218D
; ---------------------------------------------------------------------------

loc_212F:				; ...
		mov	ax, 0FFFCh
		call	__aNchkstk

loc_2135:				; ...
		push	ax
		push	bx
		push	cx
		mov	cx, di
		sub	cx, dx
		jcxz	short loc_2150
		push	cx
		mov	bx, [bp+arg_0]
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	cx
		jb	short loc_2156
		add	[bp+var_2], ax
		cmp	cx, ax
		ja	short loc_2156

loc_2150:				; ...
		pop	cx
		pop	bx
		pop	ax
		mov	di, dx
		retn
; ---------------------------------------------------------------------------

loc_2156:				; ...
		lahf
		add	sp, 8
		cmp	[bp+var_2], 0
		jnz	short loc_217F
		sahf
		jnb	short loc_2167
		mov	ah, 9
		jmp	short loc_2185
; ---------------------------------------------------------------------------

loc_2167:				; ...
		test	byte ptr [bx+1630h], 40h
		jz	short loc_2179
		mov	bx, word ptr [bp+arg_2]
		cmp	byte ptr [bx], 1Ah
		jnz	short loc_2179
		clc
		jmp	short loc_2185
; ---------------------------------------------------------------------------

loc_2179:				; ...
		stc
		mov	ax, 1C00h
		jmp	short loc_2185
; ---------------------------------------------------------------------------

loc_217F:				; ...
		mov	ax, [bp+var_2]
		sub	ax, [bp+var_4]

loc_2185:				; ...
		mov	sp, [bp+var_8]
		pop	si
		pop	di

loc_218A:				; ...
		jmp	loc_22AF
; ---------------------------------------------------------------------------

loc_218D:				; ...
		mov	cx, word ptr [bp+arg_2+2]
		or	cx, cx
		jnz	short loc_2199
		mov	ax, cx
		jmp	loc_22AF
; ---------------------------------------------------------------------------

loc_2199:				; ...
		mov	dx, word ptr [bp+arg_2]
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		jnb	short loc_21A6
		mov	ah, 9
		jmp	short loc_218A
; ---------------------------------------------------------------------------

loc_21A6:				; ...
		or	ax, ax
		jnz	short loc_218A
		test	byte ptr [bx+1630h], 40h
		jz	short loc_21BB
		mov	bx, dx
		cmp	byte ptr [bx], 1Ah
		jnz	short loc_21BB
		clc
		jmp	short loc_218A
; ---------------------------------------------------------------------------

loc_21BB:				; ...
		stc
		mov	ax, 1C00h
		jmp	short loc_218A
; ---------------------------------------------------------------------------
		align 2

loc_21C2:				; ...
		push	bp
		mov	bp, sp
		push	si
		mov	bx, [bp+arg_0]
		mov	si, 15E8h
		cmp	[si+6],	bx
		jnb	short loc_21DE
		dec	bx
		dec	bx
		or	byte ptr [bx], 1
		cmp	[si+8],	bx
		jbe	short loc_21DE
		mov	[si+8],	bx

loc_21DE:				; ...
		pop	si
		mov	sp, bp
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_21E3:				; ...
		push	bp
		mov	bp, sp
		push	si
		push	di

loc_21E8:				; ...
		mov	cx, [bp+arg_0]
		cmp	cx, 0FFE8h
		ja	short loc_2202
		mov	bx, 15E8h
		call	__searchseg
		jnb	short loc_2219
		call	__growseg
		jb	short loc_2202
		call	__searchseg
		jnb	short loc_2219

loc_2202:				; ...
		xor	ax, ax
		cmp	word_285C, ax
		jz	short loc_2218
		push	[bp+arg_0]
		call	word_285C
		add	sp, 2
		or	ax, ax
		jnz	short loc_21E8

loc_2218:				; ...
		cwd

loc_2219:				; ...
		pop	di
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		align 2

loc_221E:				; ...
		push	di
		push	si
		mov	si, 16BEh
		xor	di, di
		jmp	short loc_2236
; ---------------------------------------------------------------------------
		align 2

loc_2228:				; ...
		push	si		; FILE *
		call	_fclose
		add	sp, 2
		inc	ax
		jz	short loc_2233
		inc	di

loc_2233:				; ...
		add	si, 8

loc_2236:				; ...
		cmp	word_27D6, si
		jnb	short loc_2228
		mov	ax, di
		pop	si
		pop	di
		retn
; ---------------------------------------------------------------------------
		align 2

loc_2242:				; ...
		push	bp
		mov	bp, sp
		push	di
		push	si
		mov	si, [bp+arg_0]
		or	si, si
		jl	short loc_2254
		cmp	word_262E, si
		jg	short loc_2260

loc_2254:				; ...
		mov	word_261E, 9
		mov	ax, 0FFFFh
		jmp	short loc_2293
; ---------------------------------------------------------------------------
		align 2

loc_2260:				; ...
		mov	al, byte_2626
		mov	ah, byte_2627
		cmp	ax, 31Eh
		jge	short loc_2270
		xor	ax, ax
		jmp	short loc_2293
; ---------------------------------------------------------------------------

loc_2270:				; ...
		test	byte ptr [si+1630h], 1
		jz	short loc_2288
		push	si
		call	loc_2434
		add	sp, 2
		mov	di, ax
		or	di, ax
		jz	short loc_2291
		mov	word_262C, di

loc_2288:				; ...
		mov	word_261E, 9
		mov	di, 0FFFFh

loc_2291:				; ...
		mov	ax, di

loc_2293:				; ...
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
; ---------------------------------------------------------------------------
		align 2

loc_229A:				; ...
		jb	short loc_22B1

loc_229C:				; ...
		xor	ax, ax
		mov	sp, bp
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_22A2:				; ...
		jnb	short loc_229C
		push	ax
		call	loc_22C2
		pop	ax
		xor	ah, ah
		mov	sp, bp
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_22AF:				; ...
		jnb	short loc_22B8

loc_22B1:				; ...
		call	loc_22C2
		mov	ax, 0FFFFh
		cwd

loc_22B8:				; ...
		mov	sp, bp
		pop	bp
		retn
__lseek		endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		xor	ah, ah
		call	loc_22C2
		retn
; ---------------------------------------------------------------------------

loc_22C2:				; ...
		mov	byte ptr word_262C, al
		or	ah, ah
		jnz	short loc_22EB
		cmp	byte_2627, 3
		jb	short loc_22DC
		cmp	al, 22h
		jnb	short loc_22E0
		cmp	al, 20h
		jb	short loc_22DC
		mov	al, 5
		jmp	short loc_22E2
; ---------------------------------------------------------------------------

loc_22DC:				; ...
		cmp	al, 13h
		jbe	short loc_22E2

loc_22E0:				; ...
		mov	al, 13h

loc_22E2:				; ...
		mov	bx, 185Eh
		xlat

loc_22E6:				; ...
		cbw
		mov	word_261E, ax
		retn
; ---------------------------------------------------------------------------

loc_22EB:				; ...
		mov	al, ah
		jmp	short loc_22E6
; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl fclose(FILE *)
_fclose		proc near		; ...

var_E		= word ptr -0Eh
var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_2		= word ptr -2
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 0Eh
		push	di
		push	si
		mov	di, 0FFFFh
		mov	ax, [bp+arg_0]
		mov	si, ax
		mov	bx, ax
		test	byte ptr [bx+6], 40h
		jz	short loc_2310
		mov	byte ptr [bx+6], 0
		jmp	loc_239E
; ---------------------------------------------------------------------------
		align 2

loc_2310:				; ...
		test	byte ptr [si+6], 83h
		jnz	short loc_2319
		jmp	loc_239A
; ---------------------------------------------------------------------------

loc_2319:				; ...
		push	si
		call	__flush
		add	sp, 2
		mov	di, ax
		mov	bx, si
		sub	bx, 1696h
		mov	ax, [bx+173Ah]
		mov	[bp+var_2], ax
		push	si
		call	__freebuf
		add	sp, 2
		mov	al, [si+7]
		sub	ah, ah
		push	ax		; int
		call	_close
		add	sp, 2
		or	ax, ax
		jl	short loc_2397
		cmp	[bp+var_2], 0
		jz	short loc_239A
		mov	ax, 1872h
		push	ax		; char *
		lea	ax, [bp+var_C]
		push	ax		; char *
		call	_strcpy
		add	sp, 4
		lea	ax, [bp+var_A]
		mov	[bp+var_E], ax
		cmp	[bp+var_C], 5Ch
		jz	short loc_2376
		mov	ax, 1874h
		push	ax		; char *
		lea	ax, [bp+var_C]
		push	ax		; char *
		call	_strcat
		add	sp, 4
		jmp	short loc_2379
; ---------------------------------------------------------------------------

loc_2376:				; ...
		dec	[bp+var_E]

loc_2379:				; ...
		mov	ax, 0Ah
		push	ax		; int
		push	[bp+var_E]	; char *
		push	[bp+var_2]	; int
		call	_itoa
		add	sp, 6
		lea	ax, [bp+var_C]
		push	ax
		call	loc_251A
		add	sp, 2
		or	ax, ax
		jz	short loc_239A

loc_2397:				; ...
		mov	di, 0FFFFh

loc_239A:				; ...
		mov	byte ptr [si+6], 0

loc_239E:				; ...
		mov	ax, di
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
_fclose		endp

; ---------------------------------------------------------------------------

loc_23A6:				; ...
		pop	cx
		mov	ax, word_2842
		cmp	ax, sp
		jnb	short loc_23B4
		sub	ax, sp
		neg	ax

loc_23B2:				; ...
		jmp	cx
; ---------------------------------------------------------------------------

loc_23B4:				; ...
		xor	ax, ax
		jmp	short loc_23B2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__searchseg	proc near		; ...
		inc	cx
		and	cl, 0FEh
		push	bx
		cld
		mov	si, [bx+8]
		mov	bx, [bx+0Ah]
		xor	di, di
		jmp	short loc_23EB
; ---------------------------------------------------------------------------

loc_23C8:				; ...
		mov	ax, bx
		pop	bx
		test	al, 1
		jnz	short loc_2411
		push	bx
		mov	si, [bx+6]
		mov	bx, [bx+8]
		cmp	bx, si
		jz	short loc_2410
		dec	bx
		xor	di, di
		jmp	short loc_23EB
; ---------------------------------------------------------------------------
		align 2

loc_23E0:				; ...
		lea	dx, [si-2]
		cmp	dx, bx
		jnb	short loc_23C8
		add	si, ax
		jb	short loc_240E

loc_23EB:				; ...
		lodsw
		test	al, 1
		jz	short loc_23E0
		mov	di, si

loc_23F2:				; ...
		dec	ax
		cmp	ax, cx
		jnb	short loc_241A
		add	si, ax
		jb	short loc_240E
		mov	dx, ax
		lodsw
		test	al, 1
		jz	short loc_23E0
		add	ax, dx
		add	ax, 2
		mov	si, di
		mov	[si-2],	ax
		jmp	short loc_23F2
; ---------------------------------------------------------------------------

loc_240E:				; ...
		mov	ax, ax

loc_2410:				; ...
		pop	bx

loc_2411:				; ...
		mov	ax, [bx+6]
		mov	[bx+8],	ax
		stc
		jmp	short locret_2433
; ---------------------------------------------------------------------------

loc_241A:				; ...
		pop	bx
		mov	[si-2],	cx
		jz	short loc_2429
		add	di, cx
		sub	ax, cx
		dec	ax
		mov	[di], ax
		sub	di, cx

loc_2429:				; ...
		add	di, cx
		mov	[bx+8],	di
		mov	ax, si
		mov	dx, ds
		clc

locret_2433:				; ...
		retn
__searchseg	endp

; ---------------------------------------------------------------------------

loc_2434:				; ...
		push	bp
		mov	bp, sp
		mov	bx, [bp+4]
		mov	ah, 68h
		int	21h		; DOS -	3.3+ - COMMIT FILE, WRITE ALL BUFFERED DATA TO DISK
					; BX = file handle
		jmp	loc_22A2
; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__freebuf	proc near		; ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+arg_0]
		mov	al, [si+6]
		test	al, 83h
		jz	short loc_2469
		test	al, 8
		jz	short loc_2469
		push	word ptr [si+4]
		call	loc_21C2
		pop	cx
		and	byte ptr [si+6], 0F7h
		xor	ax, ax
		mov	[si+4],	ax
		mov	[si], ax
		mov	[si+2],	ax

loc_2469:				; ...
		pop	si
		pop	bp
		retn
__freebuf	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl close(int)
_close		proc near		; ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_0]
		cmp	bx, word_262E
		jb	short loc_247E
		mov	ax, 900h
		stc
		jmp	short loc_2489
; ---------------------------------------------------------------------------

loc_247E:				; ...
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		jb	short loc_2489
		mov	byte ptr [bx+1630h], 0

loc_2489:				; ...
		jmp	loc_229A
_close		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	strcat(char *, const char *)
_strcat		proc near		; ...

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		mov	dx, di
		mov	bx, si
		mov	ax, ds
		mov	es, ax
		assume es:seg000
		mov	di, [bp+arg_0]
		xor	ax, ax
		mov	cx, 0FFFFh
		repne scasb
		lea	si, [di-1]
		mov	di, [bp+arg_2]
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		sub	di, cx
		xchg	di, si
		mov	ax, [bp+arg_0]
		test	si, 1
		jz	short loc_24BD
		movsb
		dec	cx

loc_24BD:				; ...
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		mov	si, bx
		mov	di, dx
		pop	bp
		retn
_strcat		endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	strcpy(char *, const char *)
_strcpy		proc near		; ...

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		mov	dx, di
		mov	bx, si
		mov	si, [bp+arg_2]
		mov	di, si
		mov	ax, ds
		mov	es, ax
		xor	ax, ax
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		mov	di, [bp+arg_0]
		mov	ax, di
		test	al, 1
		jz	short loc_24F0
		movsb
		dec	cx

loc_24F0:				; ...
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		mov	si, bx
		mov	di, dx
		pop	bp
		retn
_strcpy		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	itoa(int, char *, int)
_itoa		proc near		; ...

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	bl, 1
		mov	cx, [bp+arg_4]
		mov	ax, [bp+arg_0]
		xor	dx, dx
		cmp	cx, 0Ah
		jnz	short loc_2513
		cwd

loc_2513:				; ...
		mov	di, [bp+arg_2]
		jmp	loc_2534
; ---------------------------------------------------------------------------
		align 2

loc_251A:				; ...
		push	bp
		mov	bp, sp
		mov	dx, [bp+arg_0]
		mov	ah, 41h
		int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
					; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
		jmp	loc_229A
; ---------------------------------------------------------------------------
		align 2
		mov	cx, [bp+arg_6]
		mov	ax, [bp+arg_0]
		mov	dx, [bp+arg_2]
		mov	di, [bp+arg_4]

loc_2534:				; ...
		push	di
		push	ds
		pop	es
		cld
		xchg	ax, bx
		or	al, al
		jz	short loc_2550
		cmp	cx, 0Ah
		jnz	short loc_2550
		or	dx, dx
		jns	short loc_2550
		mov	al, 2Dh
		stosb
		neg	bx
		adc	dx, 0
		neg	dx

loc_2550:				; ...
		mov	si, di

loc_2552:				; ...
		xchg	ax, dx
		xor	dx, dx
		or	ax, ax
		jz	short loc_255B
		div	cx

loc_255B:				; ...
		xchg	ax, bx
		div	cx
		xchg	ax, dx
		xchg	dx, bx
		add	al, 30h
		cmp	al, 39h
		jbe	short loc_2569
		add	al, 27h

loc_2569:				; ...
		stosb
		mov	ax, dx
		or	ax, bx
		jnz	short loc_2552
		mov	[di], al

loc_2572:				; ...
		dec	di
		lodsb
		xchg	al, [di]
		mov	[si-1],	al
		lea	ax, [si+1]
		cmp	ax, di
		jb	short loc_2572
		pop	ax
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
_itoa		endp

; ---------------------------------------------------------------------------
		align 10h
word_2590	dw 0			; ...
		db 16h dup(0), 4Dh, 53h, 20h, 52h, 75h,	6Eh, 2Dh, 54h
		db 69h,	6Dh, 65h, 20h, 4Ch, 69h, 62h, 72h, 61h,	72h, 79h
		db 20h,	2Dh, 20h, 43h, 6Fh, 70h, 79h, 72h, 69h,	67h, 68h
		db 74h,	20h, 28h, 63h, 29h, 20h, 31h, 2	dup(39h), 32h
		db 2Ch,	20h, 4Dh, 69h, 63h, 72h, 6Fh, 73h, 6Fh,	66h, 74h
		db 20h,	43h, 6Fh, 72h, 70h, 1Ah, 3 dup(0)
off_25E4	dw offset __exit	; ...
		db 4 dup(0), 5,	17h dup(0), 5Fh, 43h, 5Fh, 46h,	49h, 4Ch
		db 45h,	5Fh, 49h, 4Eh, 46h, 4Fh, 3Dh, 0
dword_2610	dd 0			; ...
		db 0Ah dup(0)
word_261E	dw 0			; ...
		db 4 dup(0)
word_2624	dw 0			; ...
byte_2626	db 0			; ...
byte_2627	db 0			; ...
word_2628	dw 0			; ...
		align 4
word_262C	dw 0			; ...
word_262E	dw 14h			; ...
		db 3 dup(81h), 2 dup(1), 0Fh dup(0)
; int argc
argc		dw 0			; ...
; char **argv
argv		dw 0			; ...
; char **envp
envp		dw 0			; ...
dword_264A	dd 164Eh		; ...
		db 9 dup(0)
byte_2657	db 0			; ...
aProgramaCompil	db 'Programa compilado com o Microsoft Visual C++ 1.52c !!',0 ; ...
		align 2
word_2690	dw 0			; ...
word_2692	dw 0			; ...
word_2694	dw 0FFFFh		; ...
		db 6 dup(0), 1,	7 dup(0), 2, 1,	6 dup(0), 2 dup(2), 4Fh
		db 17h,	2 dup(0), 4Fh, 17h, 84h, 3, 6 dup(0), 2, 4, 92h	dup(0)
		db 1, 85h dup(0)
word_27D6	dw 172Eh		; ...
		db 6 dup(0), 6,	2 dup(0), 6, 0,	1, 2 dup(0), 10h, 0, 3
		db 6, 0, 6, 2, 10h, 4, 3 dup(45h), 5 dup(5), 35h, 30h
		db 0, 50h, 4 dup(0), 2 dup(20h), 30h, 50h, 58h,	7, 8, 0
		db 3 dup(30h), 57h, 50h, 7, 2 dup(0), 2	dup(20h), 5 dup(0)
		db 8, 6	dup(60h), 2 dup(0), 2 dup(70h),	4 dup(78h), 8
		db 7, 8, 2 dup(0), 7, 0, 3 dup(8), 2 dup(0), 8,	0, 8, 2	dup(0)
		db 8, 28h, 6Eh,	75h, 2 dup(6Ch), 29h
word_283D	dw 6			; ...
		align 2
		db 2 dup(0FFh)
word_2842	dw 1A82h		; ...
		db 2 dup(0)
word_2846	dw 2000h		; ...
off_2848	dw offset __fptrap	; ...
		db 0D2h, 3
off_284C	dw offset __fptrap	; ...
off_284E	dw offset __fptrap	; ...
		db 0D2h, 3
off_2852	dw offset __fptrap	; ...
		db 0D2h, 3, 6 dup(0)
word_285C	dw 0			; ...
		db 0, 16h, 2 dup(2), 18h, 0Dh, 9, 3 dup(0Ch), 7, 8, 2 dup(16h)
		db 0FFh, 2, 0Dh, 12h, 2, 0FFh, 5Ch, 0, 5Ch, 0
word_2876	dw 0			; ...
word_2878	dw 0			; ...
word_287A	dw 0			; ...
off_287C	dw offset locret_11BA	; ...
off_287E	dw offset locret_11BA	; ...
off_2880	dw offset locret_11BA	; ...
		align 8
dword_2888	dd 0			; ...
word_288C	dw 0			; ...
word_288E	dw 0			; ...
word_2890	dw 0			; ...
word_2892	dw 0			; ...
		db 9Eh,	0Ch, 0Ah dup(0), 2 dup(3Ch), 4Eh, 4Dh, 53h, 47h
		db 2 dup(3Eh), 2 dup(0)
aR6000StackOver	db 'R6000',0Dh,0Ah
		db '- stack overflow',0Dh,0Ah,0
		db 3, 0
aR6003IntegerDi	db 'R6003',0Dh,0Ah
		db '- integer divide by 0',0Dh,0Ah,0
		db 9,0
aR6009NotEnough	db 'R6009',0Dh,0Ah
		db '- not enough space for environment',0Dh,0Ah,0
		db 0FCh, 0, 0Dh, 0Ah, 0, 0FFh, 0, 72h, 75h, 6Eh, 2Dh, 74h
		db 69h,	6Dh, 65h, 20h, 65h, 2 dup(72h),	6Fh, 72h, 20h
		db 0, 2, 0
aR6002FloatingP	db 'R6002',0Dh,0Ah
		db '- floating-point support not loaded',0Dh,0Ah,0
		db 1, 0
aR6001NullPoint	db 'R6001',0Dh,0Ah
		db '- null pointer assignment',0Dh,0Ah,0
		db 3 dup(0FFh)
seg000		ends


		end start
