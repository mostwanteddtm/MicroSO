.386P 

STACKSEG32 SEGMENT STACK USE32 'STACK'
	DB 1024 DUP (?)
STACKSEG32 ENDS

DESCRIPTOR STRUCT   				; DEFINE OUR DESCRIPTOR STRUCTURE
	LIMIT_0_15 		DW ?    		; LIMIT BITS 15-0
	BASE_0_15 		DW ?     		; BASE BITS 15-0
	BASE_16_23 		DB ?    		; BASE BITS 23-16
	ACCESS 			DB ?       		; TYPE OF SELECTOR
	GRAN 		DB ?    		; LIMIT BITS 19-16 AND OTHER INFO
	BASE_24_31 		DB ?     		; BASE BITS 31-24
DESCRIPTOR ENDS

DATA16 SEGMENT USE16 
 
	GDTR 			LABEL FWORD		; TAMANHO MÁXIMO DE UMA GDT 65535 BYTES
	GDT_LIMIT 		DW GDT_SIZE-1	; TOTAL DE DESCRITORES 8192 * 8 BYTES CADA = 65536 BYTES | (65536 - 1 = 65535)
	GDT_ADDR 		DD ?			; ENDEREÇO DA MATRIZ DE DESCRITORES: GDTR

	GDT_START 		EQU $
	NULLDESC 		DESCRIPTOR <0,0,0,0,0,0>
	CODEDESC16 		DESCRIPTOR <0FFFFH,,,10011110B,0H,>
	DATADESC16 		DESCRIPTOR <0FFFFH,,,10010010B,0H,>
	VIDEODESC16 	DESCRIPTOR <0FFFFH,8000H,0BH,10010010B,0H,0>
	CODEDESC32 		DESCRIPTOR <0FFFFH,,,10011110B,11001111B,>
	DATADESC32 		DESCRIPTOR <0FFFFH,,,10010010B,11001111B,>
	VIDEODESC32 	DESCRIPTOR <0FFFFH,08000H,0BH,10010010B,01000000B,0>
	GDT_SIZE 		EQU ($-GDT_START)
	
	IDTR 			LABEL FWORD
	IDT_LIMIT 		DW IDT_SIZE-1
	IDT_ADDR 		DD ?
		
	IDT_START 		EQU $
	IDT_DESC_00h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_DESC_01h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_DESC_02h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_DESC_03h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_DESC_04h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_DESC_05h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_DESC_06h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_DESC_07h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_DESC_08h 	DESCRIPTOR <OFFSET INT00h,SELCODEDESC16,0,10001110B,0,0>
	IDT_SIZE 		EQU ($-IDT_START)

	SELCODEDESC16 	EQU (OFFSET CODEDESC16 - GDT_START)
	SELDATADESC16 	EQU (OFFSET DATADESC16 - GDT_START)
	SELVIDEODESC16 	EQU (OFFSET VIDEODESC16 - GDT_START)
	SELDATADESC32 	EQU (OFFSET DATADESC32 - GDT_START)
	SELCODEDESC32 	EQU (OFFSET CODEDESC32 - GDT_START)
	SELVIDEODESC32 	EQU (OFFSET VIDEODESC32 - GDT_START)  
	
DATA16 ENDS

DATA32 SEGMENT USE32
DATA32 ENDS

CODE16 SEGMENT USE16  						
	ASSUME CS:CODE16, DS:DATA16

	ENTRYPOINT PROC

		CLD

		MOV		AX, DATA16
		MOV		DS, AX         
		MOV		ES, AX         				
		
		MOV		AX, 3
		INT		10H

		XOR		EAX, EAX
		MOV		AX, CODE16
		SHL		EAX, 4
		ADD		EAX, ENTRYPOINT
		MOV		CODEDESC16.BASE_0_15, AX
		SHR		EAX, 16
		MOV		CODEDESC16.BASE_16_23, AL
		MOV		CODEDESC16.BASE_24_31, AH
		
		XOR		EAX, EAX
		MOV		AX, DATA16
		SHL		EAX, 4
		MOV		DATADESC16.BASE_0_15, AX
		SHR		EAX, 16
		MOV		DATADESC16.BASE_16_23, AL
		MOV		DATADESC16.BASE_24_31, AH
		
		;XOR		EAX, EAX
		;MOV		AX, CODE32
		;SHL		EAX, 4
		;MOV		CODEDESC32.BASE_0_15, AX
		;SHR		EAX, 16
		;MOV		CODEDESC32.BASE_16_23, AL
		;MOV		CODEDESC32.BASE_24_31, AH
		
		;XOR		EAX, EAX
		;MOV		AX, DATA32
		;SHL		EAX, 4
		;MOV		DATADESC32.BASE_0_15, AX
		;SHR		EAX, 16
		;MOV		DATADESC32.BASE_16_23, AL
		;MOV		DATADESC32.BASE_24_31, AH
		
		XOR     EAX, EAX
		MOV  	AX, CODE32
		SHL 	EAX, 4      ;*16D
		ADD 	EAX, OFFSET START32
		MOV 	DWORD PTR PM_ENTRY_OFF, EAX

		XOR 	EAX, EAX
		MOV 	AX, DATA16
		SHL 	EAX, 4
		ADD 	EAX, OFFSET GDT_START
		MOV 	GDT_ADDR, EAX

		XOR 	EAX, EAX
		MOV 	AX, DATA16
		SHL 	EAX, 4
		ADD 	EAX, OFFSET IDT_START
		MOV 	IDT_ADDR, EAX

		CLI   								

		LIDT 	[IDTR]
		LGDT 	[GDTR]

		MOV 	EAX, CR0
		OR 		AL, 1           			
		MOV 	CR0, EAX   

		DB 		66h
		DB 		0EAh
		PM_ENTRY_OFF DD ?
		DW 		SELCODEDESC32

		;PUSHFD
		;PUSH 	DWORD PTR SELCODEDESC32
		;PUSH 	DWORD PTR OFFSET START32
		;IRETD   							

	ENTRYPOINT ENDP
	
	INT00h PROC
		MOV 	AX, SELVIDEODESC32
		MOV 	ES, AX
		MOV		AL, '1'
		MOV		AH, 07h
		MOV		EDI, 0
		STOSW
		HLT
		MOV 	AL, 20H						; INFORMA O FIM DA INSTRUCAO DE INTERRUPCAO
		OUT 	20H, AL              		; ACK IRQ
		IRETD
	INT00h ENDP

CODE16 ENDS

CODE32 SEGMENT USE32
	ASSUME CS:CODE32, DS:DATA32
	
	START32 PROC
		;JMP		$
		STI
	START32 ENDP

CODE32 ENDS

END ENTRYPOINT     								
