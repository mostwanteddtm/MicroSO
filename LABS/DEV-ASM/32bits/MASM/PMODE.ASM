;hTTPS://WWW.DANIWEB.COM/PROGRAMMING/SOFTWARE-DEVELOPMENT/ThREADS/238046/ASSEMBLER-TASM-SWITChING-FROM-REAL-MODE-TO-PROTECTED-MODE-AND-BACK
.386P
DATA SEGMENT 'DATA' USE16

			MESSAGE 	DB 'H',7,'E',7,'L',7,'L',7,'O',7
			MESSAGE_1=$-MESSAGE
			REST_SCR=25*80
			GDT LABEL BYTE
			DB 8 DUP(0)
			GDT_FLATCS 	DB 0FFh, 0FFh, 0, 0, 0, 10011010b, 11001111b, 0
			GDT_FLATDS 	DB 0FFh, 0FFh, 0, 0, 0, 10010010b, 11001111b, 0
			GDT_16BITCS DB 0FFh, 0FFh, 0, 0, 0, 10011010b, 0, 0
			GDT_16BITDS DB 0FFh, 0FFh, 0, 0, 0, 10010010b, 0, 0
			GDT_1=$-GDT
			GDTR 		DW GDT_1-1
			DD ?
		
DATA ENDS

RM_SEG SEGMENT PARA PUBLIC 'CODE' USE16
	ASSUME CS:RM_SEG,SS:RM_STACK,DS:DATA
	
		START	PROC FAR
		
			MOV		AX, DATA
			MOV 	DS, AX
			XOR 	EAX, EAX
			MOV 	AX, PM_SEG
			SHL 	EAX, 4
			ADD 	EAX, OFFSET PM_ENTRY
			MOV 	DWORD PTR CS:PM_ENTRY_OFF, EAX
			XOR 	EAX, EAX
			MOV 	AX, DS
			SHL 	EAX, 4
			PUSh 	EAX
			MOV 	WORD PTR GDT_16BITDS+2, AX
			ShR 	EAX, 16
			MOV 	BYTE PTR GDT_16BITDS+4, AL
			XOR 	EAX, EAX
			MOV 	AX, CS
			SHL 	EAX, 4
			MOV 	WORD PTR GDT_16BITCS+2, AX
			SHR 	EAX,16
			MOV 	BYTE PTR GDT_16BITCS+4, AL
			POP 	EAX
			ADD 	EAX, OFFSET GDT
			MOV 	DWORD PTR GDTR+2, EAX
			LGDT 	FWORD PTR GDTR
			CLI
			IN 		AL, 70h
			OR 		AL, 80h
			OUT 	70h, AL
			MOV 	EAX, CR0
			OR 		AL, 1
			MOV 	CR0, EAX
			DB 		66h
			DB 		0EAh
			PM_ENTRY_OFF DD ?
			DW 		SEL_FLATCS
			RM_RETURN:
			MOV 	EAX, CR0
			AND 	AL, 0FEh
			MOV 	CR0, EAX
			DB 		0EAh
			DW 		$+4
			DW 		RM_SEG
			IN 		AL, 70h
			AND 	AL, 07Fh
			OUT 	70h, AL
			STI
			MOV 	Ah, 0
			INT 	16h
			MOV 	Ah, 4Ch
			INT 	21h
		
		START ENDP
		
		SEL_FLATCS EQU 00001000b
		SEL_FLATDS EQU 00010000b
		SEL_16BITCS EQU 00011000b
		SEL_16BITDS EQU 00100000b
		
RM_SEG ENDS

PM_SEG SEGMENT PUBLIC 'CODE' USE32
	ASSUME CS:PM_SEG
	
		PM_ENTRY PROC FAR
		
			MOV 	AX, SEL_16BITDS
			MOV 	DS, AX
			MOV		AX, SEL_FLATDS
			MOV		ES, AX
			MOV		EDI, 0B8000h
			MOV		ECX, REST_SCR
			MOV		AX, 720h
			REP		STOSW
			MOV		ESI, OFFSET MESSAGE
			MOV		EDI, 0B80A0h
			MOV		ECX, MESSAGE_1
			REP		MOVSB
			DB 		0EAh
			DD 		OFFSET RM_RETURN
			DW 		SEL_16BITCS
			
		PM_ENTRY ENDP
		
PM_SEG ENDS

RM_STACK SEGMENT STACK 'STACK' USE16
			DB 100h DUP(?)
RM_STACK ENDS
END START