.386P 
;======================================================================================|
;																					   |
;	PUBLIC METHOD FOR DEBUG ON PROTECTED MODE                                          |
;                                                                                      |
;	DEBUGPMODE:                                                                        |
;	IN:                                                                                |
;		ECX = SIZE OF BUFFER TO BE COPIED                                              |
;		DS:ESI = ORIGIN OF THE CONTENT TO BE COPIED TO THE BUFFER                      |
;		EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP,										   | 
;		DS, ES, SS = VALUE DEFINED ON MAIN PROGRAM     								   |
;                                                                                      |
;	OUT: BUFFER = COPIED FROM CONTENT LOADED IN MEMORY                                 |
;		 SHOW REGISTERS (EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP, CS, DS, ES, SS)       |
;																					   |
;======================================================================================| 

INCLUDE START.INC

I8254X_REC_ADD_LOW	EQU 5400h					; REGISTER RECEIVE ADDRESS LOW (RAL)
I8254X_INT_MASK		EQU 0D0h					; REGISTER INTERRUPT MASK SET/READ
I8254X_REG_ICR		EQU 00C0h 					; INTERRUPT CAUSE READ
I8254X_REG_RDBAL	EQU 2800h 					; RX DESCRIPTOR BASE ADDRESS LOW
I8254X_REG_RDBAH	EQU 2804h 					; RX DESCRIPTOR BASE ADDRESS HIGH
I8254X_REG_RDLEN	EQU 2808h 					; RX DESCRIPTOR LENGTH
I8254X_REG_RDH		EQU 2810h 					; RX DESCRIPTOR HEAD
I8254X_REG_RDT		EQU 2818h 					; RX DESCRIPTOR TAIL
I8254X_REG_RDTR		EQU 2820h 					; RX DELAY TIMER REGISTER
I8254X_REG_RCTL		EQU 100h 					; RECEIVE CONTROL REGISTER

CONFIG_ADDRESS  	EQU 0CF8h
CONFIG_DATA     	EQU 0CFCh 
	
FIRSTDEVICE			EQU 80000000h
LASTDEVICE			EQU 80FFFF00h

DATASEG32 SEGMENT USE32
 
	TIMER			DB 0
	RTC				DB 0
	INTPCI			DB 31h
	DATA			DQ ?

	I8254BASE		DD ?
	
	PCICONFIG 		DD 80000000h
	BUSNUMBER		DD 0

	TOTALDEVICES	DB 31
	TOTALBUS		DB 255
	
	ETHDEVICE		DD 100E8086h				; INTEL PRO/1000 [ 100E - IRQ 2Bh ] [ 107C - IRQ 2Ah ]
	DEVICEID		DD ?

DATASEG32 ENDS

CODESEG32 SEGMENT USE32
	ASSUME CS:SEGS32,DS:SEGS32
	
	START32 PROC
	
		MOV 	AX, SELDATADESC32				; RELOAD ALL SEGMENT REGS WITH 32BIT SELECTORS
		MOV 	DS, AX
		MOV		AX, SELVIDEODESC32
		MOV		ES, AX

		CALL	FINDDEVICE
		CALL	GETPCIDATA
		CALL	GETMACADDRESS
		CALL 	INITNETWORK

		MOV		EDX, PCICONFIG
		MOV		ECX, SIZEOF DATA
		MOV		ESI, OFFSET DATA

		STI

		DB		0EAh
		DD		DEBUGPMODE
		DW		SELDEBUGDESC32

	START32 ENDP
	
	;======================================================================================|
	;	CHECKKEYPRESS
	;		IRQ 01h - INT 21h
	;======================================================================================|
	
	CHECKKEYPRESS PROC
	
		MOV 	AX, SELDATADESC32			
		MOV 	DS, AX
	
		MOV 	BYTE PTR KEYPRESSED, 0
	@@: CMP		BYTE PTR KEYPRESSED, 0
		JE		@b
		
		CALL	FINDDEVICE
		CALL	GETPCIDATA
		CALL	GETMACADDRESS
		CALL 	INITNETWORK
		
		MOV		EDX, PCICONFIG
		MOV		ECX, SIZEOF DATA
		MOV		ESI, OFFSET DATA

		DB		0EAh
		DD		DEBUGPMODE
		DW		SELDEBUGDESC32
	
	CHECKKEYPRESS ENDP
	
	;======================================================================================|
	;	GETMACADDRESS
	;		IN: NOTHING
	;		OUT: DATA = MAC ADDRESS
	;======================================================================================|
	
	GETMACADDRESS PROC
	
		PUSH	DS
		PUSH	ES
		PUSH	EAX
		
		MOV		ESI, DWORD PTR I8254BASE		; GET NETWORK CARD BASE ADDRESS
		ADD		ESI, I8254X_REC_ADD_LOW			; REGISTER: RECEIVE ADDRESS LOW (RAL)
	
		MOV 	AX, SELFULLDTDESC32				; DATA DESCRIPTOR START AT 0:0
		MOV 	DS, AX							; MAC = i8254 BASE ADDRESS + RAL
		
		MOV		AX, SELDATADESC32
		MOV 	ES, AX
		
		MOV		EDI, OFFSET DATA				; BUFFER WITH MAC ADDRESS
		
		MOV		ECX, 2
		REP 	MOVSD							; COPY [DS]:ESI -> [ES]:EDI
		
		POP		EAX
		POP		ES
		POP		DS

		RET
	
	GETMACADDRESS ENDP
	
	;======================================================================================|
	;	GETPCIDATA
	;		IN: NOTHING
	;		OUT: EAX = NETOWORK CARD BASE ADDRESS
	;======================================================================================|
	
	GETPCIDATA PROC
		
		PUSH	DS
		
		MOV 	AX, SELDATADESC32				; RELOAD ALL SEGMENT REGS WITH 32BIT SELECTORS
		MOV 	DS, AX

		MOV		EAX, PCICONFIG					; BUS/DEVICE/FUNCTION					
		ADD		EAX, REGISTER					; REGISTER 10h = BASE MEMORY NETWORK CARD	
		
        MOV     DX, CONFIG_ADDRESS				; PCI CONFIG REGISTER 0CF8h
        OUT     DX, EAX							; SEND COMMAND TO CONFIG REGISTER
		
		MOV		DX, CONFIG_DATA					; PCI DATA REGISTER 0CFCh
        IN      EAX, DX							; SELECT REGISTER TO GET DATA
		
		MOV 	DWORD PTR I8254BASE, EAX		; GRAB THE i8254 BASE MEMORY NETWORK CARD
		
		POP		DS
		
		RET
		
		REGISTER EQU 10h						; REGISTER 10h = BASE MEMORY NETWORK CARD
		
	GETPCIDATA ENDP
	
	;======================================================================================|
	;	INITNETWORK
	;		IN: NOTHING
	;		OUT: EDX = INTERRUPT MASK REGISTER SET/READ
	;======================================================================================|
	
	INITNETWORK PROC
	
		PUSH	DS
		PUSH	EAX
		
		MOV		AX, SELDATADESC32
		MOV		DS, AX

		MOV		ESI, OFFSET PCICONFIG			; BUS/DEVICE/FUNCTION
		MOV		EAX, DWORD PTR [ESI]
		ADD		EAX, 4							; REGISTER 4 PCI BUS MASTERING
		MOV		DX, CONFIG_ADDRESS
		OUT		DX, EAX							; GET STATUS COMMAND PCI BUS MASTERING
		
		MOV		DX, CONFIG_DATA
		IN		EAX, DX
		
		BTS		EAX, 2
		PUSH	EAX

		MOV		ESI, OFFSET PCICONFIG			; BUS/DEVICE/FUNCTION
		MOV		EAX, DWORD PTR [ESI]
		ADD		EAX, 4							; REGISTER 4 PCI BUS MASTERING
		MOV		DX, CONFIG_ADDRESS				; PCI CONFIG REGISTER 0CF8h				
		OUT		DX, EAX
		
		POP		EAX
		MOV		DX, CONFIG_DATA					; PCI DATA REGISTER CFCh
		OUT		DX, EAX							; ENABLE PCI BUS MASTERING
		
		MOV		ESI, DWORD PTR I8254BASE		; GET NETWORK CARD BASE ADDRESS
	
		MOV 	AX, SELFULLDTDESC32				; DATA DESCRIPTOR START AT 0:0
		MOV 	DS, AX							; MAC = i8254 BASE ADDRESS + RAL
		
		MOV 	EAX, 1A0000h
		MOV 	[ESI+I8254X_REG_RDBAL], EAX		; RECEIVE DESCRIPTOR BASE ADDRESS LOW
		SHR 	EAX, 32
		MOV 	[ESI+I8254X_REG_RDBAH], EAX		; RECEIVE DESCRIPTOR BASE ADDRESS HIGH
		MOV 	EAX, (32 * 8)					; MULTIPLES OF 8, EACH DESCIPTOR IS 16 BYTES
		MOV 	[ESI+I8254X_REG_RDLEN], EAX		; RECEIVE DESCRIPTOR LENGTH
		XOR 	EAX, EAX
		MOV 	[ESI+I8254X_REG_RDH], EAX		; RECEIVE DESCRIPTOR HEAD
		MOV 	EAX, 1
		MOV 	[ESI+I8254X_REG_RDT], EAX		; RECEIVE DESCRIPTOR TAIL
		MOV 	EAX, 4008026h					; RECEIVER ENABLE, STORE BAD PACKETS, LONG PACKET RECEPTION, BROADCAST ACCEPT MODE, STRIP ETHERNET CRC FROM INCOMING PACKET
		MOV 	[ESI+I8254X_REG_RCTL], EAX		; RECEIVE CONTROL REGISTER
					
		MOV		EAX, 1FFFFh
		MOV		[ESI+I8254X_INT_MASK], EAX		; REGISTER: INTERRUPT MASK REGISTER SET/READ (IMS)
		
		POP		EAX
		POP		DS
		
		RET
		
	INITNETWORK ENDP
	
	;======================================================================================|
	;	INITNETWORK
	;		IN: NOTHING
	;		OUT: PCICONFIG = PCI DEVICE (BUS/DEVICE/FUNCTION)
	;======================================================================================|
	
	FINDDEVICE PROC
	
		PUSH	ES
		PUSH	DS
		
	STARTFIND:
	
		MOV		AX, SELDATADESC32
		MOV		ES, AX
		MOV		DS, AX

		XOR		ECX, ECX
		MOV 	CL, TOTALDEVICES						; TOTAL DEVICES 0~31 = 32	
		
	@@: MOV		EAX, PCICONFIG							; PCICONFIG = BUS, DEVICE, FUNCTION 
		MOV		DX, CONFIG_ADDRESS						; GET CONFIG REGISTER 0CF8h
		OUT		DX, EAX									; SELECT PCICONFIG TO GET DATA
		
		MOV		DX, CONFIG_DATA							; PCI DATA REGISTER 0CFCh
		IN		EAX, DX									; GET DATA FROM PCI REGISTER
							
		MOV		ESI, OFFSET ETHDEVICE
		MOV		EDI, OFFSET DEVICEID
		MOV		DWORD PTR [EDI], EAX
		CMPSD											; CMP PCIDEVICE WITH ETHDEVICE
		JE		DEVICEFOUND								; IF EQUAL, DEVICE FOUND
		
		ADD		DWORD PTR PCICONFIG, 800h				; ADD DEVICE
		LOOP	@b
		
		CMP		DWORD PTR PCICONFIG, LASTDEVICE			; CMP LAST BUS AND LAST DEVICE = 80FFFF00h
		JGE		NODEVICE								; IF EQUAL OR GREATER ETHDEVICE NOT FOUND
		
		MOV		DWORD PTR PCICONFIG, FIRSTDEVICE		; START PACI BUS 80000000h
		ADD		DWORD PTR BUSNUMBER, 10000h				; NEXT PCI BUS
		
		MOV		ECX, DWORD PTR BUSNUMBER
		ADD		DWORD PTR PCICONFIG, ECX				; PCI DEVICE = PCICONFIG + BUSNUMBER
		
		JMP		STARTFIND

	NODEVICE:
	
		POP		DS
		POP		ES
		CLI
		JMP		$
		
	DEVICEFOUND:

		POP		DS
		POP		ES
		RET
		
	FINDDEVICE ENDP
	
CODESEG32 ENDS

END START16     								; START PROGRAM IN CODEDESC16:START