.386P

SEGS32 GROUP CODESEG32, DATASEG32

PUBLIC DEVICEID 
PUBLIC CONTENTLOADED

SELDATADESC32		EQU 20h

CONFIG_ADDRESS  	EQU 0CF8h
CONFIG_DATA     	EQU 0CFCh 
	
FIRSTDEVICE			EQU 80000000h
LASTDEVICE			EQU 80FFF800h

DATASEG32 SEGMENT USE32

	PCICONFIG 		DD ?
	BUSNUMBER		DD 0

	TOTALDEVICES	DB 32
	TOTALBUS		DB 255

	DEVICEID		DD ?								; WHILE FIND DEVICE, TEMP DEVICEID
	DEVICE			DD ?								; LOCAL VARIABLE = PCIDEVICE (INPUT IN FINDPCIDEVICE)

	CONTENTLOADED	DD	3Fh DUP(?)
	
DATASEG32 ENDS

CODESEG32 SEGMENT USE32
	ASSUME CS:SEGS32, DS:DATASEG32
	
	;======================================================================================|
	;	GETPCIDATA
	;		IN: NOTHING
	;		OUT: EAX = NETOWORK CARD BASE ADDRESS
	;======================================================================================|
	
	GETPCIDATA PROC C
		
		PUSH	DS
		
		MOV 	AX, SELDATADESC32						; RELOAD ALL SEGMENT REGS WITH 32BIT SELECTORS
		MOV 	DS, AX		
		
		MOV		EAX, PCICONFIG							; BUS/DEVICE/FUNCTION					
		ADD		EAX, REGISTER							; REGISTER 10h = BASE MEMORY NETWORK CARD	
				
        MOV     DX, CONFIG_ADDRESS						; PCI CONFIG REGISTER 0CF8h
        OUT     DX, EAX									; SEND COMMAND TO CONFIG REGISTER
		
		XOR		EAX, EAX
				
		MOV		DX, CONFIG_DATA							; PCI DATA REGISTER 0CFCh
        IN      EAX, DX									; SELECT REGISTER TO GET DATA
				
		AND		AL, 0F0h
		
		POP		DS		
				
		RET												; GRAB THE ETHERNET BASE MEMORY NETWORK CARD
				
		REGISTER EQU 10h								; REGISTER 10h = BASE MEMORY NETWORK CARD
		
	GETPCIDATA ENDP
	
	;======================================================================================|
	;	PCIFINDDEVICE
	;		IN: PCIDEVICE (DWORD)
	;		OUT: EAX = [PCICONFIG = BUS, DEVICE, FUNCTION ]
	;			 EDX = DEVICE FOUND (PCICONFIG)
	;
	;		ERR: EDX = DEVICE NOT FOUND (PCICONFIG)
	;======================================================================================|
	
	PCIFINDDEVICE PROC C PCIDEVICE:DWORD
	
		PUSH	ES
		PUSH	DS
		
		MOV		AX, SELDATADESC32
		MOV		ES, AX
		MOV		DS, AX
		
		MOV		DWORD PTR PCICONFIG, FIRSTDEVICE		; START CONFIG ADDRESS 80000000h
		
		MOV		EAX, DWORD PTR PCIDEVICE				; COPY PARAMETER INPUT PCIDEVICE
		MOV		ESI, OFFSET DEVICE						
		MOV		DWORD PTR [ESI], EAX					; TO LOCAL VARIABLE DEVICE
		
	STARTFIND:

		XOR		ECX, ECX
		MOV 	CL, TOTALDEVICES						; TOTAL DEVICES 0~31 = 32	
		
	@@: MOV		EAX, PCICONFIG							; PCICONFIG = BUS, DEVICE, FUNCTION 
		MOV		DX, CONFIG_ADDRESS						; GET CONFIG REGISTER 0CF8h
		OUT		DX, EAX									; SELECT PCICONFIG TO GET DATA
		
		MOV		DX, CONFIG_DATA							; PCI DATA REGISTER 0CFCh
		IN		EAX, DX									; GET DATA FROM PCI REGISTER
		
		MOV		ESI, OFFSET DEVICE
		MOV		EDI, OFFSET DEVICEID
		MOV		DWORD PTR [EDI], EAX
		CMPSD											; CMP DEVICE WITH CURRENT DEVICEID
		JE		DEVICEFOUND								; IF EQUAL, DEVICE FOUND
		
		ADD		DWORD PTR PCICONFIG, 800h				; ADD DEVICE
		
		CMP		DWORD PTR PCICONFIG, LASTDEVICE			; CMP LAST BUS AND LAST DEVICE = 80FFFF00h
		JG		NODEVICE								; IF EQUAL OR GREATER DEVICEID NOT FOUND
		
		LOOP	@b

		MOV		DWORD PTR PCICONFIG, FIRSTDEVICE		; START PACI BUS 80000000h
		ADD		DWORD PTR BUSNUMBER, 10000h				; NEXT PCI BUS
		
		MOV		EAX, DWORD PTR BUSNUMBER
		ADD		DWORD PTR PCICONFIG, EAX				; PCI DEVICE = PCICONFIG + BUSNUMBER
		
		JMP		STARTFIND

	NODEVICE:
	
		MOV		EDX, DWORD PTR PCICONFIG
		POP		DS
		POP		ES
		STC
		RET
		
	DEVICEFOUND:

		MOV		EDX, DWORD PTR PCICONFIG
		POP		DS
		POP		ES
		RET
		
	PCIFINDDEVICE ENDP
	
	;======================================================================================|
	;	GETREGVALUES
	;		IN: NOTHING
	;		OUT: CONTENTLOADED = BUFFER TO 0FFh TOTAL PCI REGISTERS
	;======================================================================================|
	
	GETREGVALUES PROC C
	
		PUSH	DS
		
		MOV		AX, SELDATADESC32
		MOV		DS, AX
	
		MOV		EAX, PCICONFIG							; PCICONFIG = BUS, DEVICE, FUNCTION
		MOV		DX, CONFIG_ADDRESS						; GET CONFIG REGISTER 0CF8h
		OUT		DX, EAX									; SELECT FIRST REGISTER IN PCICONFIG

		MOV		ECX, BUFFERSIZE	
		MOV     ESI, OFFSET CONTENTLOADED	
			
	NEXTREG:	
			
		PUSH	EAX

        MOV     DX, CONFIG_DATA							; PCI DATA REGISTER 0CFCh
        IN      EAX, DX									; GET DATA FROM PCI REGISTER
	
		JMP		$+2
	
		CMP		ECX, BUFFERSIZE							; (3Fh X 4h) + 4h = FFh (TOTAL PCI REGISTERS) 
		JNE		EBXOK	
		MOV		EBX, EAX	
			
	EBXOK:	
	
        MOV     DWORD PTR [ESI], EAX					; MOV PCI DATA TO BUFFER 
			
		POP		EAX	
			
		ADD		EAX, 4									; FOR EVERY INTERACTION 4 BYTES DATA
		ADD		ESI, 4	
			
		MOV		DX, CONFIG_ADDRESS						; PCI CONFIG REGISTER 0CF8h 
		OUT		DX, EAX									; SELECT PCICONFIG TO GET DATA
		
		JMP		$+2
		
		LOOP	NEXTREG
		
		POP		DS
		RET
		
	BUFFERSIZE	EQU 3Fh
	
	GETREGVALUES ENDP
	
CODESEG32 ENDS

END