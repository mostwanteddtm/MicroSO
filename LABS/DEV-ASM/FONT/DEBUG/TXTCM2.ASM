#masm#
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2014 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3057-7374-2C			    |
; |	Zhou Tao, Jiangsu Australia Sinuo Network Technology Co., Ltd.	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6D4EC48CE3F0EE77D0ED9A6FA28CB1AB
; Input	CRC32 :	B14C1DC0

; File Name   :	C:\Users\Marcos\Desktop\TXTCM2.COM
; Format      :	MS-DOS COM-file
; Base Address:	1000h Range: 10100h-10630h Loaded length: 530h

		.286p
		.model tiny

; ===========================================================================

; Segment type:	Pure code
seg000		segment	byte public 'CODE'
		
		org 100h
		assume cs:seg000, ds:seg000

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public start 
		
start		proc    near  
    
    		;call	PROC01
    		
    		mov	    ah, 0
    		mov	    al, 13h
    		int	    10h		                        ; - VIDEO - SET	VIDEO MODE
    					                            ; AL = mode
    		push	es
    		mov	    ax, 0A000h
    		mov	    es, ax
    
    		call	PROC02
    		call	PROC03
    		call	PROC04 
    		
    		mov	    ah, 0
    		int	    16h		                        ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
    					                            ; Return: AH = scan code, AL = character
    		pop	    es
    
    		mov	    ah, 0
    		mov	    al, 3
    		int	    10h		                        ; - VIDEO - SET	VIDEO MODE
    					                            ; AL = mode
    		mov	    ax, 4C00h
    		int	    21h		                        ; DOS -	2+ - QUIT WITH EXIT CODE (EXIT) 
		
start		endp			                        ; AL = exit code


; =============== S U B	R O U T	I N E =======================================


PROC01	    proc    near		                      
    
    		mov	    ax, 1A00h
    		int	    10h		                        ; - VIDEO - DISPLAY COMBINATION	(PS,VGA/MCGA): read display combination	code
    		cmp	    al, 7
    		jg	    short LABEL02


LABEL01:	mov	    dx, 142h
    		mov	    ah, 9
    		int	    21h		                        ; DOS -	PRINT STRING
    					                            ; DS:DX	-> string terminated by	"$"
    		mov	    ax, 4C04h
    		int	    21h		                        ; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
    					                            ; AL = exit code
; ---------------------------------------------------------------------------

LABEL02:	cmp	    al, 0Bh 

		    jz	    short LABEL01
		    retn
		    
PROC01	    endp

; ---------------------------------------------------------------------------
		db 54h,	61h, 72h, 6Ah, 65h, 74h, 61h, 20h, 6Eh,	6Fh, 20h
		db 56h,	47h, 41h, 20h, 6Fh, 20h, 6Eh, 6Fh, 20h,	63h, 6Fh
		db 6Ch,	6Fh, 72h, 24h

; =============== S U B	R O U T	I N E =======================================


PROC05	    proc    near		
    
    		push	bx
    		push	dx
    		xchg	dl, dh
    		add	    bx, dx
    		shr	    dx, 1
    		shr	    dx, 1
    		add	    bx, dx
    		mov	    es:[bx], al
    		pop	    dx
    		pop	    bx
    		retn 
		
PROC05	    endp

; ---------------------------------------------------------------------------
    		push	bp
    		mov	    bp, sp
    		sub	    sp, 0Ah
    		push	ax
    		push	bx
    		push	cx
    		push	dx
    		push	si
    		push	di
    		mov	    bx, [bp+4]
    		mov	    dx, [bp+6]
    		mov	    si, [bp+8]
    		mov	    di, [bp+0Ah]
    		cmp	    bx, si
    		jnz	    short LABEL03
    		cmp	    dx, di
    		jnz	    short LABEL03
    		mov	    ax, [bp+0Ch]
    		call	PROC05
    		jmp	    LABEL11
; ---------------------------------------------------------------------------

LABEL03:				
    		mov	    word ptr [bp-8], 1
    		mov	    word ptr [bp-0Ah], 1
    		sub	    si, bx
    		jns	    short LABEL04
    		neg	    word ptr [bp-8]
    		neg	    si

LABEL04:				
    		sub	    di, dx
    		jns	    short LABEL05
    		neg	    word ptr [bp-0Ah]
    		neg	    di

LABEL05:				
    		mov	    ax, [bp+0Ch]
    		call	PROC05
    		cmp	    di, si
    		ja	    short LABEL08
    		mov	    ax, di
    		shl	    ax, 1
    		sub	    ax, si
    		mov	    [bp-6],	ax
    		mov	    [bp-2],	ax
    		add	    [bp-2],	si
    		mov	    [bp-4],	ax
    		sub	    [bp-4],	si

LABEL06:				
    		cmp	    word ptr [bp-6], 0
    		mov	    ax, [bp-2]
    		jl	    short LABEL07
    		mov	    ax, [bp-4]
    		add	    dx, [bp-0Ah]

LABEL07:				
    		add	    [bp-6],	ax
    		add	    bx, [bp-8]
    		mov	    ax, [bp+0Ch]
    		call	PROC05
    		cmp	    bx, [bp+8]
    		jnz	    short LABEL06
    		mov	    bx, [bp+8]
    		mov	    dx, [bp+0Ah]
    		call	PROC05
    		jmp	    short LABEL11
; ---------------------------------------------------------------------------

LABEL08:				
    		mov	    ax, si
    		shl	    ax, 1
    		sub	    ax, di
    		mov	    [bp-6],	ax
    		mov	    [bp-2],	ax
    		add	    [bp-2],	di
    		mov	    [bp-4],	ax
    		sub	    [bp-4],	di

LABEL09:				
    		cmp	    word ptr [bp-6], 0
    		mov	    ax, [bp-2]
    		jl	    short LABEL10
    		mov	    ax, [bp-4]
    		add	    bx, [bp-8]

LABEL10:				
    		add	    [bp-6],	ax
    		add	    dx, [bp-0Ah]
    		mov	    ax, [bp+0Ch]
    		call	PROC05
    		cmp	    dx, [bp+0Ah]
    		jnz	    short LABEL09
    		mov	    bx, [bp+8]
    		mov	    dx, [bp+0Ah]
    		call	PROC05

LABEL11:				
    		pop	    di
    		pop	    si
    		pop	    dx
    		pop	    cx
    		pop	    bx
    		pop	    ax
    		mov	    sp, bp
    		pop	    bp
    		retn	0Ah

; =============== S U B	R O U T	I N E =======================================


PROC06		proc    near		 
    
    		push	bx
    		push	dx
    		xchg	dl, dh
    		add	    bx, dx
    		shr	    dx, 1
    		shr	    dx, 1
    		add	    bx, dx
    		mov	    di, bx
    		rep     stosb
    		pop	    dx
    		pop	    bx
    		retn    
		
PROC06		endp


; =============== S U B	R O U T	I N E =======================================


PROC07		proc    near		   
    
    		push	cx
    		mov	    cx, bx
    		sub	    cx, ax
    		jge	    short LABEL12
    		neg	    cx
    		mov	    ax, bx

LABEL12:				
    		inc	    cx
    		xchg	al, ah
    		add	    dx, ax
    		shr	    ax, 1
    		shr	    ax, 1
    		add	    dx, ax
    		mov	    di, dx
    		pop	    ax

LABEL13:				
    		stosb
    		add	    di, 13Fh
    		loop	LABEL13
    		retn 
    		
PROC07		endp


; =============== S U B	R O U T	I N E =======================================


PROC08		proc    near		 
    
    		mov	    ah, al
    		cld
    		xor	    di, di
    		mov	    cx, 7D00h
    		rep     stosw
    		retn 
		
PROC08		endp

; ---------------------------------------------------------------------------
			push	bp
			mov		bp, sp
			mov		bx, [bp+0Ch]
			mov		dx, [bp+0Ah]
			mov		cx, [bp+8]
			sub		cx, bx
			inc		cx
			mov		al, [bp+4]
			call	PROC06
			mov		bx, [bp+0Ch]
			mov		dx, [bp+6]
			mov		cx, [bp+8]
			sub		cx, bx
			inc		cx
			mov		al, [bp+4]
			call	PROC06
			mov		dx, [bp+0Ch]
			mov		ax, [bp+0Ah]
			mov		bx, [bp+6]
			mov		cl, [bp+4]
			call	PROC07
			mov		dx, [bp+8]
			mov		ax, [bp+0Ah]
			mov		bx, [bp+6]
			mov		cl, [bp+4]
			call	PROC07
			mov		sp, bp
			pop		bp
			retn	0Ah
; ---------------------------------------------------------------------------
			push	bp
			mov		bp, sp
			mov		bx, [bp+0Ch]
			mov		dx, [bp+0Ah]
			mov		cx, [bp+8]
			sub		cx, bx
			inc		cx
			mov		al, [bp+4]
			push	cx
			call	PROC06
			pop		bx
			mov		dx, [bp+6]
			sub		dx, [bp+0Ah]

LABEL14:				
			add		di, 140h
			sub		di, bx
			mov		cx, bx
			rep 	stosb
			sub		dx, 1
			jnz		short LABEL14
			mov		sp, bp
			pop		bp
			retn	0Ah
; ---------------------------------------------------------------------------
			push	bx
			push	dx
			xchg	dl, dh
			add		bx, dx
			shr		dx, 1
			shr		dx, 1
			add		bx, dx
			mov		al, es:[bx]
			pop		dx
			pop		bx
			retn

; =============== S U B	R O U T	I N E =======================================


PROC02		proc 	near		

			push	bx
			push	bp
			push	es 
			
			mov     ax, ds
			mov     es, ax
			
			mov     ah, 02h
            mov     al, 8
            mov     ch, 0                           ; Cylinder
            mov     dh, 0                           ; Head
            mov     cl, 1                           ; Sector
            mov     dh, 0
            mov     dl, 0
            mov     bx, OFFSET font
            mov     bp, bx
            int     13h
			
			mov		ax, 1130h
			;mov		bh, 3
					;int	10h							; - VIDEO - TEXT-MODE CHARACTER	GENERATOR FUNCTIONS (PS, EGA, VGA)
													; AL = 00h, 10h: load user-specified patterns
													; AL = 01h, 11h: load ROM monochrome patterns (8 by 14)
													; AL = 02h, 12h: load ROM 8 by 8 double-dot patterns
													; AL = 03h: set	block specifier
			;mov		SEG8X8, es
			;mov		OFF8x8, bp
			;mov		SEGFONT, es
			;mov		OFFFONT, bp
			mov		bh, 6
			int		10h		; - VIDEO -
			mov		SEG8X16, es
			mov		OFF8X16, bp
			pop		es
			pop		bp
			pop		bx
			retn
			
PROC02		endp


; =============== S U B	R O U T	I N E =======================================


PROC09		proc 	near		

			push	ax
			push	bx
			push	si
			push	di
			push	ds
			push	es
			mov		di, ds
			mov		es, di

			mov		di, 5E8h
			mov		si, SEG8X8
			mov		ds, si
			mov		cl, 3
			shl		ax, cl
			mov		si, es:OFF8x8
			add		si, ax
			cld
			mov		cx, 4
			rep 	movsw
			pop		es

			pop		ds
			pop		di
			pop		si
			pop		bx
			pop		ax
			retn
			
PROC09		endp


; =============== S U B	R O U T	I N E =======================================


PROC10		proc 	near		

			push	ax
			push	cx
			push	si
			push	di
			push	ds
			push	es
			mov		di, ds
			mov		es, di

			mov		di, 5E8h
			mov		si, SEG8X16
			mov		ds, si
			mov		cl, 4
			shl		ax, cl
			mov		si, es:OFF8X16
			add		si, ax
			cld
			mov		cx, 8
			rep 	movsw
			pop		es

			pop		ds
			pop		di
			pop		si
			pop		cx
			pop		ax
			retn
		
PROC10		endp


; =============== S U B	R O U T	I N E =======================================


PROC11		proc 	near		

			push	ax
			push	bx
			push	cx
			push	dx
			push	si
			call	PROC09
			mov		si, 0
			mov		dx, POSY
			mov		ax, bx

LABEL15:				
			mov		VARDB9, 80h
			mov		bx, POSX

LABEL16:				
			mov		cl, [si+5E8h]
			test	VARDB9, cl
			jz		short LABEL17
			push	bx
			call	PROC14
			pop		bx

LABEL17:				
			inc		bx
			shr		VARDB9, 1
			jnz		short LABEL16
			inc		si
			inc		dx
			cmp		si, 8
			jnz		short LABEL15
			pop		si
			pop		dx
			pop		cx
			pop		bx
			pop		ax
			retn
			
PROC11		endp


; =============== S U B	R O U T	I N E =======================================


PROC12		proc 	near		

			push	ax
			push	bx
			push	cx
			push	dx
			push	si
			call	PROC10
			mov		si, 0
			mov		dx, POSY
			mov		ax, bx

LABEL18:				
			mov		VARDB9, 80h
			mov		bx, POSX

LABEL19:				
			mov		cl, [si+5E8h]
			test	VARDB9, cl
			jz		short LABEL20
			push	bx
			call	PROC14
			pop		bx

LABEL20:				
			inc		bx
			shr		VARDB9, 1
			jnz		short LABEL19
			inc		si
			inc		dx
			cmp		si, 10h
			jnz		short LABEL18
			pop		si
			pop		dx
			pop		cx
			pop		bx
			pop		ax
			retn
			
PROC12		endp

; ---------------------------------------------------------------------------
			mov		al, 1Ah
			;call	PROC08
			mov		ax, 0
			mov		bx, 1
			mov		cx, 0FFh

LABEL21:				
			call	PROC11
			add		POSX, 8
			cmp		POSX, 80h
			jbe		short LABEL22
			mov		POSX, 0
			add		POSY, 8

LABEL22:				
			inc		ax
			inc		bx
			and		bx, 0Fh
			loop	LABEL21
			retn

; =============== S U B	R O U T	I N E =======================================


PROC13		proc 	near		

			mov		al, [di]
			or		al, al
			jz		short LABEL23
			mov		bx, 1
			call	PROC12
			add		POSX, 8
			inc		di
			jmp		short PROC13
; ---------------------------------------------------------------------------

LABEL23:				
			retn
			
PROC13		endp

; ---------------------------------------------------------------------------

LABEL24:				
			mov		al, [di]
			or		al, al
			jz		short LABEL25
			mov		bx, 1
			call	PROC11
			add		POSX, 8
			inc		di
			jmp		short LABEL24
; ---------------------------------------------------------------------------

LABEL25:		
			retn

; =============== S U B	R O U T	I N E =======================================


PROC14		proc 	near
		
			push	bx
			push	dx
			xchg	dl, dh
			add		bx, dx
			shr		dx, 1
			shr		dx, 1
			add		bx, dx
			mov		es:[bx], al
			pop		dx
			pop		bx
			retn
		
PROC14		endp


; =============== S U B	R O U T	I N E =======================================


PROC15		proc 	near
		
			push	ax
			push	bx
			push	cx
			push	si
			push	di
			push	ds
			push	es
			push	ds
			pop		es
			
			mov		di, 5E8h
			push	OFF8x8
			pop		si
			push	SEG8X8
			pop		ds
			xor		ah, ah
			mov		cl, 3
			shl		ax, cl
			add		si, ax
			mov		cx, 8

LABEL26:				
			lodsb
			mov		bx, 7

LABEL27:				
			mov		ah, 0
			shr		al, 1
			jnb		short LABEL28
			mov		ah, 1

LABEL28:				
			mov		es:[bx+di], ah
			dec		bx
			jns		short LABEL27
			add		di, 8
			dec		cx
			jnz		short LABEL26
			pop		es

			pop		ds
			pop		di
			pop		si
			pop		cx
			pop		bx
			pop		ax
			retn
			
PROC15		endp


; =============== S U B	R O U T	I N E =======================================


PROC16		proc 	near	
	
			push	ax
			push	bx
			push	cx
			push	dx
			push	si
			push	di
			call	PROC15
			mov		si, 5E8h
			mov		cx, POSX
			add		cx, 8
			mov		di, POSY
			add		di, 8
			mov		dx, POSY

LABEL29:				
			mov		bx, POSX

LABEL30:				
			lodsb
			or		al, al
			jz		short LABEL31
			mov		al, ah
			call	PROC14

LABEL31:				
			inc		bx
			cmp		bx, cx
			jnz		short LABEL30
			inc		dx
			cmp		dx, di
			jnz		short LABEL29
			pop		di
			pop		si
			pop		dx
			pop		cx
			pop		bx
			pop		ax
			retn
			
PROC16		endp

; ---------------------------------------------------------------------------
			push	ax
			push	si
			push	POSX

LABEL32:				
			lodsb
			or		al, al
			jz		short LABEL33
			call	PROC16
			add		POSX, 8
			jmp		short LABEL32
; ---------------------------------------------------------------------------

LABEL33:				
			pop		POSX
			pop		si
			pop		ax
			retn

; =============== S U B	R O U T	I N E =======================================


PROC17		proc 	near
		
			push	ax
			push	bx
			push	cx
			push	dx
			push	si
			push	di
			call	PROC15
			mov		si, 5E8h
			mov		cx, POSX
			add		cx, 10h
			mov		di, POSY
			add		di, 10h
			mov		dx, POSY

LABEL34:				
			mov		bx, POSX

LABEL35:				
			lodsb
			or		al, al
			jz		short LABEL36
			mov		al, ah
			call	PROC14
			push	bx
			push	dx
			inc		bx
			call	PROC14
			inc		dx
			call	PROC14
			dec		bx
			call	PROC14
			pop		dx
			pop		bx

LABEL36:				
			inc		bx
			inc		bx
			cmp		bx, cx
			jnz		short LABEL35
			inc		dx
			inc		dx
			cmp		dx, di
			jnz		short LABEL34
			pop		di
			pop		si
			pop		dx
			pop		cx
			pop		bx
			pop		ax
			retn
			
PROC17		endp

; ---------------------------------------------------------------------------
			push	ax
			push	si
			push	POSX

LABEL37:				
			lodsb
			or		al, al
			jz		short LABEL38
			call	PROC17
			add		POSX, 10h
			jmp		short LABEL37
; ---------------------------------------------------------------------------

LABEL38:				
			pop		POSX
			pop		si
			pop		ax
			retn

; =============== S U B	R O U T	I N E =======================================


PROC03		proc 	near
		
			mov		al, 1Ah
			;call	PROC08
			mov		ax, 0
			mov		bx, 1
			mov		cx, 0FFh

LABEL39:				
			call	PROC12
			add		POSX, 8
			cmp		POSX, 0DAh
			jbe		short LABEL40
			mov		POSX, 0
			add		POSY, 10h

LABEL40:				
			inc		ax
			inc		bx
			and		bx, 0Fh
			loop	LABEL39
			retn
			
PROC03		endp


; =============== S U B	R O U T	I N E =======================================


PROC04		proc 	near
		
			mov		POSX, 0
			mov		POSY, 0A0h
			mov		di, OFFSET msgFont
			call	PROC13
			mov		POSX, 0
			mov		POSY, 0B0h
			mov		di, OFFSET copyright
			call	PROC13
			retn
			
PROC04	endp

; ---------------------------------------------------------------------------
SEG8X8	    dw      0			
OFF8x8	    dw      0			
SEGFONT	    dw      0			
OFFFONT	    dw      0			
SEG8X16	    dw      0			
OFF8X16	    dw      0			
POSX	    dw      0			
POSY	    dw      0
			
VARDB9	    db      80h			
		    db      10h dup(0)
		
font        db      256*16 dup (0)

msgFont	    db      'Font ROM 8x16 da BIOS',0  
copyright	db      '(c) Open your eyes to assembly',0 


seg000		ends


		end start
